# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_QuantLibEx')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_QuantLibEx')
    _QuantLibEx = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_QuantLibEx', [dirname(__file__)])
        except ImportError:
            import _QuantLibEx
            return _QuantLibEx
        try:
            _mod = imp.load_module('_QuantLibEx', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _QuantLibEx = swig_import_helper()
    del swig_import_helper
else:
    import _QuantLibEx
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _QuantLibEx.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _QuantLibEx.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _QuantLibEx.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _QuantLibEx.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _QuantLibEx.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _QuantLibEx.SwigPyIterator_equal(self, x)

    def copy(self):
        return _QuantLibEx.SwigPyIterator_copy(self)

    def next(self):
        return _QuantLibEx.SwigPyIterator_next(self)

    def __next__(self):
        return _QuantLibEx.SwigPyIterator___next__(self)

    def previous(self):
        return _QuantLibEx.SwigPyIterator_previous(self)

    def advance(self, n):
        return _QuantLibEx.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _QuantLibEx.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _QuantLibEx.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _QuantLibEx.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _QuantLibEx.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _QuantLibEx.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _QuantLibEx.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _QuantLibEx.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)
cvar = _QuantLibEx.cvar
__hexversion__ = cvar.__hexversion__
__version__ = cvar.__version__

SHARED_PTR_DISOWN = _QuantLibEx.SHARED_PTR_DISOWN
class Observable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Observable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Observable, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLibEx.new_Observable()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_Observable
    __del__ = lambda self: None
Observable_swigregister = _QuantLibEx.Observable_swigregister
Observable_swigregister(Observable)

class Observer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Observer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Observer, name)
    __repr__ = _swig_repr

    def __init__(self, callback):
        this = _QuantLibEx.new_Observer(callback)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def _registerWith(self, arg2):
        return _QuantLibEx.Observer__registerWith(self, arg2)

    def _unregisterWith(self, arg2):
        return _QuantLibEx.Observer__unregisterWith(self, arg2)

    def registerWith(self,x):
        if hasattr(x, "asObservable"):
            self._registerWith(x.asObservable())
        else:
            self._registerWith(x)
    def unregisterWith(self,x):
        if hasattr(x, "asObservable"):
            self._unregisterWith(x.asObservable())
        else:
            self._unregisterWith(x)

    __swig_destroy__ = _QuantLibEx.delete_Observer
    __del__ = lambda self: None
Observer_swigregister = _QuantLibEx.Observer_swigregister
Observer_swigregister(Observer)

class Array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Array, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLibEx.new_Array(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __len__(self):
        return _QuantLibEx.Array___len__(self)

    def __str__(self):
        return _QuantLibEx.Array___str__(self)

    def __add__(self, a):
        return _QuantLibEx.Array___add__(self, a)

    def __sub__(self, a):
        return _QuantLibEx.Array___sub__(self, a)

    def __mul__(self, *args):
        return _QuantLibEx.Array___mul__(self, *args)

    def __div__(self, a):
        return _QuantLibEx.Array___div__(self, a)

    def __rmul__(self, a):
        return _QuantLibEx.Array___rmul__(self, a)

    def __getslice__(self, i, j):
        return _QuantLibEx.Array___getslice__(self, i, j)

    def __setslice__(self, i, j, rhs):
        return _QuantLibEx.Array___setslice__(self, i, j, rhs)

    def __nonzero__(self):
        return _QuantLibEx.Array___nonzero__(self)

    def __bool__(self):
        return _QuantLibEx.Array___bool__(self)

    def __getitem__(self, i):
        return _QuantLibEx.Array___getitem__(self, i)

    def __setitem__(self, i, x):
        return _QuantLibEx.Array___setitem__(self, i, x)
    __swig_destroy__ = _QuantLibEx.delete_Array
    __del__ = lambda self: None
Array_swigregister = _QuantLibEx.Array_swigregister
Array_swigregister(Array)

class DefaultLexicographicalViewColumn(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DefaultLexicographicalViewColumn, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DefaultLexicographicalViewColumn, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __getitem__(self, i):
        return _QuantLibEx.DefaultLexicographicalViewColumn___getitem__(self, i)

    def __setitem__(self, i, x):
        return _QuantLibEx.DefaultLexicographicalViewColumn___setitem__(self, i, x)
    __swig_destroy__ = _QuantLibEx.delete_DefaultLexicographicalViewColumn
    __del__ = lambda self: None
DefaultLexicographicalViewColumn_swigregister = _QuantLibEx.DefaultLexicographicalViewColumn_swigregister
DefaultLexicographicalViewColumn_swigregister(DefaultLexicographicalViewColumn)

class LexicographicalView(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LexicographicalView, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LexicographicalView, name)
    __repr__ = _swig_repr

    def xSize(self):
        return _QuantLibEx.LexicographicalView_xSize(self)

    def ySize(self):
        return _QuantLibEx.LexicographicalView_ySize(self)

    def __init__(self, a, xSize):
        this = _QuantLibEx.new_LexicographicalView(a, xSize)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __str__(self):
        return _QuantLibEx.LexicographicalView___str__(self)

    def __getitem__(self, i):
        return _QuantLibEx.LexicographicalView___getitem__(self, i)
    __swig_destroy__ = _QuantLibEx.delete_LexicographicalView
    __del__ = lambda self: None
LexicographicalView_swigregister = _QuantLibEx.LexicographicalView_swigregister
LexicographicalView_swigregister(LexicographicalView)

class MatrixRow(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixRow, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixRow, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __getitem__(self, i):
        return _QuantLibEx.MatrixRow___getitem__(self, i)

    def __setitem__(self, i, x):
        return _QuantLibEx.MatrixRow___setitem__(self, i, x)
    __swig_destroy__ = _QuantLibEx.delete_MatrixRow
    __del__ = lambda self: None
MatrixRow_swigregister = _QuantLibEx.MatrixRow_swigregister
MatrixRow_swigregister(MatrixRow)

class Matrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Matrix, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLibEx.new_Matrix(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def rows(self):
        return _QuantLibEx.Matrix_rows(self)

    def columns(self):
        return _QuantLibEx.Matrix_columns(self)

    def __str__(self):
        return _QuantLibEx.Matrix___str__(self)

    def __add__(self, m):
        return _QuantLibEx.Matrix___add__(self, m)

    def __sub__(self, m):
        return _QuantLibEx.Matrix___sub__(self, m)

    def __mul__(self, *args):
        return _QuantLibEx.Matrix___mul__(self, *args)

    def __div__(self, x):
        return _QuantLibEx.Matrix___div__(self, x)

    def __getitem__(self, i):
        return _QuantLibEx.Matrix___getitem__(self, i)

    def __rmul__(self, *args):
        return _QuantLibEx.Matrix___rmul__(self, *args)
    __swig_destroy__ = _QuantLibEx.delete_Matrix
    __del__ = lambda self: None
Matrix_swigregister = _QuantLibEx.Matrix_swigregister
Matrix_swigregister(Matrix)

class SalvagingAlgorithm(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SalvagingAlgorithm, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SalvagingAlgorithm, name)
    __repr__ = _swig_repr
    NoAlgorithm = _QuantLibEx.SalvagingAlgorithm_NoAlgorithm
    Spectral = _QuantLibEx.SalvagingAlgorithm_Spectral

    def __init__(self):
        this = _QuantLibEx.new_SalvagingAlgorithm()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_SalvagingAlgorithm
    __del__ = lambda self: None
SalvagingAlgorithm_swigregister = _QuantLibEx.SalvagingAlgorithm_swigregister
SalvagingAlgorithm_swigregister(SalvagingAlgorithm)


def transpose(m):
    return _QuantLibEx.transpose(m)
transpose = _QuantLibEx.transpose

def outerProduct(v1, v2):
    return _QuantLibEx.outerProduct(v1, v2)
outerProduct = _QuantLibEx.outerProduct

def pseudoSqrt(m, a):
    return _QuantLibEx.pseudoSqrt(m, a)
pseudoSqrt = _QuantLibEx.pseudoSqrt
class SVD(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SVD, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SVD, name)
    __repr__ = _swig_repr

    def __init__(self, arg2):
        this = _QuantLibEx.new_SVD(arg2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def U(self):
        return _QuantLibEx.SVD_U(self)

    def V(self):
        return _QuantLibEx.SVD_V(self)

    def S(self):
        return _QuantLibEx.SVD_S(self)

    def singularValues(self):
        return _QuantLibEx.SVD_singularValues(self)
    __swig_destroy__ = _QuantLibEx.delete_SVD
    __del__ = lambda self: None
SVD_swigregister = _QuantLibEx.SVD_swigregister
SVD_swigregister(SVD)

class Quote(Observable):
    __swig_setmethods__ = {}
    for _s in [Observable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Quote, name, value)
    __swig_getmethods__ = {}
    for _s in [Observable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Quote, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def value(self):
        return _QuantLibEx.Quote_value(self)

    def isValid(self):
        return _QuantLibEx.Quote_isValid(self)
    __swig_destroy__ = _QuantLibEx.delete_Quote
    __del__ = lambda self: None
Quote_swigregister = _QuantLibEx.Quote_swigregister
Quote_swigregister(Quote)

class QuoteHandle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuoteHandle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, QuoteHandle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLibEx.new_QuoteHandle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        return _QuantLibEx.QuoteHandle___deref__(self)

    def __nonzero__(self):
        return _QuantLibEx.QuoteHandle___nonzero__(self)

    def __bool__(self):
        return _QuantLibEx.QuoteHandle___bool__(self)

    def asObservable(self):
        return _QuantLibEx.QuoteHandle_asObservable(self)
    __swig_destroy__ = _QuantLibEx.delete_QuoteHandle
    __del__ = lambda self: None

    def value(self):
        return _QuantLibEx.QuoteHandle_value(self)

    def isValid(self):
        return _QuantLibEx.QuoteHandle_isValid(self)
QuoteHandle_swigregister = _QuantLibEx.QuoteHandle_swigregister
QuoteHandle_swigregister(QuoteHandle)

class RelinkableQuoteHandle(QuoteHandle):
    __swig_setmethods__ = {}
    for _s in [QuoteHandle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RelinkableQuoteHandle, name, value)
    __swig_getmethods__ = {}
    for _s in [QuoteHandle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RelinkableQuoteHandle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLibEx.new_RelinkableQuoteHandle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def linkTo(self, arg2):
        return _QuantLibEx.RelinkableQuoteHandle_linkTo(self, arg2)

    def reset(self):
        return _QuantLibEx.RelinkableQuoteHandle_reset(self)
    __swig_destroy__ = _QuantLibEx.delete_RelinkableQuoteHandle
    __del__ = lambda self: None
RelinkableQuoteHandle_swigregister = _QuantLibEx.RelinkableQuoteHandle_swigregister
RelinkableQuoteHandle_swigregister(RelinkableQuoteHandle)

class SimpleQuote(Quote):
    __swig_setmethods__ = {}
    for _s in [Quote]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimpleQuote, name, value)
    __swig_getmethods__ = {}
    for _s in [Quote]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimpleQuote, name)
    __repr__ = _swig_repr

    def __init__(self, value):
        this = _QuantLibEx.new_SimpleQuote(value)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setValue(self, value):
        return _QuantLibEx.SimpleQuote_setValue(self, value)
    __swig_destroy__ = _QuantLibEx.delete_SimpleQuote
    __del__ = lambda self: None
SimpleQuote_swigregister = _QuantLibEx.SimpleQuote_swigregister
SimpleQuote_swigregister(SimpleQuote)

class DerivedQuote(Quote):
    __swig_setmethods__ = {}
    for _s in [Quote]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivedQuote, name, value)
    __swig_getmethods__ = {}
    for _s in [Quote]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivedQuote, name)
    __repr__ = _swig_repr

    def __init__(self, h, function):
        this = _QuantLibEx.new_DerivedQuote(h, function)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_DerivedQuote
    __del__ = lambda self: None
DerivedQuote_swigregister = _QuantLibEx.DerivedQuote_swigregister
DerivedQuote_swigregister(DerivedQuote)

class CompositeQuote(Quote):
    __swig_setmethods__ = {}
    for _s in [Quote]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CompositeQuote, name, value)
    __swig_getmethods__ = {}
    for _s in [Quote]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CompositeQuote, name)
    __repr__ = _swig_repr

    def __init__(self, h1, h2, function):
        this = _QuantLibEx.new_CompositeQuote(h1, h2, function)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_CompositeQuote
    __del__ = lambda self: None
CompositeQuote_swigregister = _QuantLibEx.CompositeQuote_swigregister
CompositeQuote_swigregister(CompositeQuote)

class QuoteVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuoteVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, QuoteVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _QuantLibEx.QuoteVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _QuantLibEx.QuoteVector___nonzero__(self)

    def __bool__(self):
        return _QuantLibEx.QuoteVector___bool__(self)

    def __len__(self):
        return _QuantLibEx.QuoteVector___len__(self)

    def __getslice__(self, i, j):
        return _QuantLibEx.QuoteVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _QuantLibEx.QuoteVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _QuantLibEx.QuoteVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _QuantLibEx.QuoteVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _QuantLibEx.QuoteVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _QuantLibEx.QuoteVector___setitem__(self, *args)

    def pop(self):
        return _QuantLibEx.QuoteVector_pop(self)

    def append(self, x):
        return _QuantLibEx.QuoteVector_append(self, x)

    def empty(self):
        return _QuantLibEx.QuoteVector_empty(self)

    def size(self):
        return _QuantLibEx.QuoteVector_size(self)

    def swap(self, v):
        return _QuantLibEx.QuoteVector_swap(self, v)

    def begin(self):
        return _QuantLibEx.QuoteVector_begin(self)

    def end(self):
        return _QuantLibEx.QuoteVector_end(self)

    def rbegin(self):
        return _QuantLibEx.QuoteVector_rbegin(self)

    def rend(self):
        return _QuantLibEx.QuoteVector_rend(self)

    def clear(self):
        return _QuantLibEx.QuoteVector_clear(self)

    def get_allocator(self):
        return _QuantLibEx.QuoteVector_get_allocator(self)

    def pop_back(self):
        return _QuantLibEx.QuoteVector_pop_back(self)

    def erase(self, *args):
        return _QuantLibEx.QuoteVector_erase(self, *args)

    def __init__(self, *args):
        this = _QuantLibEx.new_QuoteVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _QuantLibEx.QuoteVector_push_back(self, x)

    def front(self):
        return _QuantLibEx.QuoteVector_front(self)

    def back(self):
        return _QuantLibEx.QuoteVector_back(self)

    def assign(self, n, x):
        return _QuantLibEx.QuoteVector_assign(self, n, x)

    def resize(self, *args):
        return _QuantLibEx.QuoteVector_resize(self, *args)

    def insert(self, *args):
        return _QuantLibEx.QuoteVector_insert(self, *args)

    def reserve(self, n):
        return _QuantLibEx.QuoteVector_reserve(self, n)

    def capacity(self):
        return _QuantLibEx.QuoteVector_capacity(self)
    __swig_destroy__ = _QuantLibEx.delete_QuoteVector
    __del__ = lambda self: None
QuoteVector_swigregister = _QuantLibEx.QuoteVector_swigregister
QuoteVector_swigregister(QuoteVector)

class QuoteVectorVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuoteVectorVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, QuoteVectorVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _QuantLibEx.QuoteVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _QuantLibEx.QuoteVectorVector___nonzero__(self)

    def __bool__(self):
        return _QuantLibEx.QuoteVectorVector___bool__(self)

    def __len__(self):
        return _QuantLibEx.QuoteVectorVector___len__(self)

    def __getslice__(self, i, j):
        return _QuantLibEx.QuoteVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _QuantLibEx.QuoteVectorVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _QuantLibEx.QuoteVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _QuantLibEx.QuoteVectorVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _QuantLibEx.QuoteVectorVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _QuantLibEx.QuoteVectorVector___setitem__(self, *args)

    def pop(self):
        return _QuantLibEx.QuoteVectorVector_pop(self)

    def append(self, x):
        return _QuantLibEx.QuoteVectorVector_append(self, x)

    def empty(self):
        return _QuantLibEx.QuoteVectorVector_empty(self)

    def size(self):
        return _QuantLibEx.QuoteVectorVector_size(self)

    def swap(self, v):
        return _QuantLibEx.QuoteVectorVector_swap(self, v)

    def begin(self):
        return _QuantLibEx.QuoteVectorVector_begin(self)

    def end(self):
        return _QuantLibEx.QuoteVectorVector_end(self)

    def rbegin(self):
        return _QuantLibEx.QuoteVectorVector_rbegin(self)

    def rend(self):
        return _QuantLibEx.QuoteVectorVector_rend(self)

    def clear(self):
        return _QuantLibEx.QuoteVectorVector_clear(self)

    def get_allocator(self):
        return _QuantLibEx.QuoteVectorVector_get_allocator(self)

    def pop_back(self):
        return _QuantLibEx.QuoteVectorVector_pop_back(self)

    def erase(self, *args):
        return _QuantLibEx.QuoteVectorVector_erase(self, *args)

    def __init__(self, *args):
        this = _QuantLibEx.new_QuoteVectorVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _QuantLibEx.QuoteVectorVector_push_back(self, x)

    def front(self):
        return _QuantLibEx.QuoteVectorVector_front(self)

    def back(self):
        return _QuantLibEx.QuoteVectorVector_back(self)

    def assign(self, n, x):
        return _QuantLibEx.QuoteVectorVector_assign(self, n, x)

    def resize(self, *args):
        return _QuantLibEx.QuoteVectorVector_resize(self, *args)

    def insert(self, *args):
        return _QuantLibEx.QuoteVectorVector_insert(self, *args)

    def reserve(self, n):
        return _QuantLibEx.QuoteVectorVector_reserve(self, n)

    def capacity(self):
        return _QuantLibEx.QuoteVectorVector_capacity(self)
    __swig_destroy__ = _QuantLibEx.delete_QuoteVectorVector
    __del__ = lambda self: None
QuoteVectorVector_swigregister = _QuantLibEx.QuoteVectorVector_swigregister
QuoteVectorVector_swigregister(QuoteVectorVector)

class QuoteHandleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuoteHandleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, QuoteHandleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _QuantLibEx.QuoteHandleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _QuantLibEx.QuoteHandleVector___nonzero__(self)

    def __bool__(self):
        return _QuantLibEx.QuoteHandleVector___bool__(self)

    def __len__(self):
        return _QuantLibEx.QuoteHandleVector___len__(self)

    def __getslice__(self, i, j):
        return _QuantLibEx.QuoteHandleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _QuantLibEx.QuoteHandleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _QuantLibEx.QuoteHandleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _QuantLibEx.QuoteHandleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _QuantLibEx.QuoteHandleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _QuantLibEx.QuoteHandleVector___setitem__(self, *args)

    def pop(self):
        return _QuantLibEx.QuoteHandleVector_pop(self)

    def append(self, x):
        return _QuantLibEx.QuoteHandleVector_append(self, x)

    def empty(self):
        return _QuantLibEx.QuoteHandleVector_empty(self)

    def size(self):
        return _QuantLibEx.QuoteHandleVector_size(self)

    def swap(self, v):
        return _QuantLibEx.QuoteHandleVector_swap(self, v)

    def begin(self):
        return _QuantLibEx.QuoteHandleVector_begin(self)

    def end(self):
        return _QuantLibEx.QuoteHandleVector_end(self)

    def rbegin(self):
        return _QuantLibEx.QuoteHandleVector_rbegin(self)

    def rend(self):
        return _QuantLibEx.QuoteHandleVector_rend(self)

    def clear(self):
        return _QuantLibEx.QuoteHandleVector_clear(self)

    def get_allocator(self):
        return _QuantLibEx.QuoteHandleVector_get_allocator(self)

    def pop_back(self):
        return _QuantLibEx.QuoteHandleVector_pop_back(self)

    def erase(self, *args):
        return _QuantLibEx.QuoteHandleVector_erase(self, *args)

    def __init__(self, *args):
        this = _QuantLibEx.new_QuoteHandleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _QuantLibEx.QuoteHandleVector_push_back(self, x)

    def front(self):
        return _QuantLibEx.QuoteHandleVector_front(self)

    def back(self):
        return _QuantLibEx.QuoteHandleVector_back(self)

    def assign(self, n, x):
        return _QuantLibEx.QuoteHandleVector_assign(self, n, x)

    def resize(self, *args):
        return _QuantLibEx.QuoteHandleVector_resize(self, *args)

    def insert(self, *args):
        return _QuantLibEx.QuoteHandleVector_insert(self, *args)

    def reserve(self, n):
        return _QuantLibEx.QuoteHandleVector_reserve(self, n)

    def capacity(self):
        return _QuantLibEx.QuoteHandleVector_capacity(self)
    __swig_destroy__ = _QuantLibEx.delete_QuoteHandleVector
    __del__ = lambda self: None
QuoteHandleVector_swigregister = _QuantLibEx.QuoteHandleVector_swigregister
QuoteHandleVector_swigregister(QuoteHandleVector)

class QuoteHandleVectorVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuoteHandleVectorVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, QuoteHandleVectorVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _QuantLibEx.QuoteHandleVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _QuantLibEx.QuoteHandleVectorVector___nonzero__(self)

    def __bool__(self):
        return _QuantLibEx.QuoteHandleVectorVector___bool__(self)

    def __len__(self):
        return _QuantLibEx.QuoteHandleVectorVector___len__(self)

    def __getslice__(self, i, j):
        return _QuantLibEx.QuoteHandleVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _QuantLibEx.QuoteHandleVectorVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _QuantLibEx.QuoteHandleVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _QuantLibEx.QuoteHandleVectorVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _QuantLibEx.QuoteHandleVectorVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _QuantLibEx.QuoteHandleVectorVector___setitem__(self, *args)

    def pop(self):
        return _QuantLibEx.QuoteHandleVectorVector_pop(self)

    def append(self, x):
        return _QuantLibEx.QuoteHandleVectorVector_append(self, x)

    def empty(self):
        return _QuantLibEx.QuoteHandleVectorVector_empty(self)

    def size(self):
        return _QuantLibEx.QuoteHandleVectorVector_size(self)

    def swap(self, v):
        return _QuantLibEx.QuoteHandleVectorVector_swap(self, v)

    def begin(self):
        return _QuantLibEx.QuoteHandleVectorVector_begin(self)

    def end(self):
        return _QuantLibEx.QuoteHandleVectorVector_end(self)

    def rbegin(self):
        return _QuantLibEx.QuoteHandleVectorVector_rbegin(self)

    def rend(self):
        return _QuantLibEx.QuoteHandleVectorVector_rend(self)

    def clear(self):
        return _QuantLibEx.QuoteHandleVectorVector_clear(self)

    def get_allocator(self):
        return _QuantLibEx.QuoteHandleVectorVector_get_allocator(self)

    def pop_back(self):
        return _QuantLibEx.QuoteHandleVectorVector_pop_back(self)

    def erase(self, *args):
        return _QuantLibEx.QuoteHandleVectorVector_erase(self, *args)

    def __init__(self, *args):
        this = _QuantLibEx.new_QuoteHandleVectorVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _QuantLibEx.QuoteHandleVectorVector_push_back(self, x)

    def front(self):
        return _QuantLibEx.QuoteHandleVectorVector_front(self)

    def back(self):
        return _QuantLibEx.QuoteHandleVectorVector_back(self)

    def assign(self, n, x):
        return _QuantLibEx.QuoteHandleVectorVector_assign(self, n, x)

    def resize(self, *args):
        return _QuantLibEx.QuoteHandleVectorVector_resize(self, *args)

    def insert(self, *args):
        return _QuantLibEx.QuoteHandleVectorVector_insert(self, *args)

    def reserve(self, n):
        return _QuantLibEx.QuoteHandleVectorVector_reserve(self, n)

    def capacity(self):
        return _QuantLibEx.QuoteHandleVectorVector_capacity(self)
    __swig_destroy__ = _QuantLibEx.delete_QuoteHandleVectorVector
    __del__ = lambda self: None
QuoteHandleVectorVector_swigregister = _QuantLibEx.QuoteHandleVectorVector_swigregister
QuoteHandleVectorVector_swigregister(QuoteHandleVectorVector)

class RelinkableQuoteHandleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RelinkableQuoteHandleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RelinkableQuoteHandleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _QuantLibEx.RelinkableQuoteHandleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _QuantLibEx.RelinkableQuoteHandleVector___nonzero__(self)

    def __bool__(self):
        return _QuantLibEx.RelinkableQuoteHandleVector___bool__(self)

    def __len__(self):
        return _QuantLibEx.RelinkableQuoteHandleVector___len__(self)

    def __getslice__(self, i, j):
        return _QuantLibEx.RelinkableQuoteHandleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _QuantLibEx.RelinkableQuoteHandleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _QuantLibEx.RelinkableQuoteHandleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _QuantLibEx.RelinkableQuoteHandleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _QuantLibEx.RelinkableQuoteHandleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _QuantLibEx.RelinkableQuoteHandleVector___setitem__(self, *args)

    def pop(self):
        return _QuantLibEx.RelinkableQuoteHandleVector_pop(self)

    def append(self, x):
        return _QuantLibEx.RelinkableQuoteHandleVector_append(self, x)

    def empty(self):
        return _QuantLibEx.RelinkableQuoteHandleVector_empty(self)

    def size(self):
        return _QuantLibEx.RelinkableQuoteHandleVector_size(self)

    def swap(self, v):
        return _QuantLibEx.RelinkableQuoteHandleVector_swap(self, v)

    def begin(self):
        return _QuantLibEx.RelinkableQuoteHandleVector_begin(self)

    def end(self):
        return _QuantLibEx.RelinkableQuoteHandleVector_end(self)

    def rbegin(self):
        return _QuantLibEx.RelinkableQuoteHandleVector_rbegin(self)

    def rend(self):
        return _QuantLibEx.RelinkableQuoteHandleVector_rend(self)

    def clear(self):
        return _QuantLibEx.RelinkableQuoteHandleVector_clear(self)

    def get_allocator(self):
        return _QuantLibEx.RelinkableQuoteHandleVector_get_allocator(self)

    def pop_back(self):
        return _QuantLibEx.RelinkableQuoteHandleVector_pop_back(self)

    def erase(self, *args):
        return _QuantLibEx.RelinkableQuoteHandleVector_erase(self, *args)

    def __init__(self, *args):
        this = _QuantLibEx.new_RelinkableQuoteHandleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _QuantLibEx.RelinkableQuoteHandleVector_push_back(self, x)

    def front(self):
        return _QuantLibEx.RelinkableQuoteHandleVector_front(self)

    def back(self):
        return _QuantLibEx.RelinkableQuoteHandleVector_back(self)

    def assign(self, n, x):
        return _QuantLibEx.RelinkableQuoteHandleVector_assign(self, n, x)

    def resize(self, *args):
        return _QuantLibEx.RelinkableQuoteHandleVector_resize(self, *args)

    def insert(self, *args):
        return _QuantLibEx.RelinkableQuoteHandleVector_insert(self, *args)

    def reserve(self, n):
        return _QuantLibEx.RelinkableQuoteHandleVector_reserve(self, n)

    def capacity(self):
        return _QuantLibEx.RelinkableQuoteHandleVector_capacity(self)
    __swig_destroy__ = _QuantLibEx.delete_RelinkableQuoteHandleVector
    __del__ = lambda self: None
RelinkableQuoteHandleVector_swigregister = _QuantLibEx.RelinkableQuoteHandleVector_swigregister
RelinkableQuoteHandleVector_swigregister(RelinkableQuoteHandleVector)

class RelinkableQuoteHandleVectorVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RelinkableQuoteHandleVectorVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RelinkableQuoteHandleVectorVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _QuantLibEx.RelinkableQuoteHandleVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _QuantLibEx.RelinkableQuoteHandleVectorVector___nonzero__(self)

    def __bool__(self):
        return _QuantLibEx.RelinkableQuoteHandleVectorVector___bool__(self)

    def __len__(self):
        return _QuantLibEx.RelinkableQuoteHandleVectorVector___len__(self)

    def __getslice__(self, i, j):
        return _QuantLibEx.RelinkableQuoteHandleVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _QuantLibEx.RelinkableQuoteHandleVectorVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _QuantLibEx.RelinkableQuoteHandleVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _QuantLibEx.RelinkableQuoteHandleVectorVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _QuantLibEx.RelinkableQuoteHandleVectorVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _QuantLibEx.RelinkableQuoteHandleVectorVector___setitem__(self, *args)

    def pop(self):
        return _QuantLibEx.RelinkableQuoteHandleVectorVector_pop(self)

    def append(self, x):
        return _QuantLibEx.RelinkableQuoteHandleVectorVector_append(self, x)

    def empty(self):
        return _QuantLibEx.RelinkableQuoteHandleVectorVector_empty(self)

    def size(self):
        return _QuantLibEx.RelinkableQuoteHandleVectorVector_size(self)

    def swap(self, v):
        return _QuantLibEx.RelinkableQuoteHandleVectorVector_swap(self, v)

    def begin(self):
        return _QuantLibEx.RelinkableQuoteHandleVectorVector_begin(self)

    def end(self):
        return _QuantLibEx.RelinkableQuoteHandleVectorVector_end(self)

    def rbegin(self):
        return _QuantLibEx.RelinkableQuoteHandleVectorVector_rbegin(self)

    def rend(self):
        return _QuantLibEx.RelinkableQuoteHandleVectorVector_rend(self)

    def clear(self):
        return _QuantLibEx.RelinkableQuoteHandleVectorVector_clear(self)

    def get_allocator(self):
        return _QuantLibEx.RelinkableQuoteHandleVectorVector_get_allocator(self)

    def pop_back(self):
        return _QuantLibEx.RelinkableQuoteHandleVectorVector_pop_back(self)

    def erase(self, *args):
        return _QuantLibEx.RelinkableQuoteHandleVectorVector_erase(self, *args)

    def __init__(self, *args):
        this = _QuantLibEx.new_RelinkableQuoteHandleVectorVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _QuantLibEx.RelinkableQuoteHandleVectorVector_push_back(self, x)

    def front(self):
        return _QuantLibEx.RelinkableQuoteHandleVectorVector_front(self)

    def back(self):
        return _QuantLibEx.RelinkableQuoteHandleVectorVector_back(self)

    def assign(self, n, x):
        return _QuantLibEx.RelinkableQuoteHandleVectorVector_assign(self, n, x)

    def resize(self, *args):
        return _QuantLibEx.RelinkableQuoteHandleVectorVector_resize(self, *args)

    def insert(self, *args):
        return _QuantLibEx.RelinkableQuoteHandleVectorVector_insert(self, *args)

    def reserve(self, n):
        return _QuantLibEx.RelinkableQuoteHandleVectorVector_reserve(self, n)

    def capacity(self):
        return _QuantLibEx.RelinkableQuoteHandleVectorVector_capacity(self)
    __swig_destroy__ = _QuantLibEx.delete_RelinkableQuoteHandleVectorVector
    __del__ = lambda self: None
RelinkableQuoteHandleVectorVector_swigregister = _QuantLibEx.RelinkableQuoteHandleVectorVector_swigregister
RelinkableQuoteHandleVectorVector_swigregister(RelinkableQuoteHandleVectorVector)

class PricingEngine(Observable):
    __swig_setmethods__ = {}
    for _s in [Observable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PricingEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [Observable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PricingEngine, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _QuantLibEx.delete_PricingEngine
    __del__ = lambda self: None
PricingEngine_swigregister = _QuantLibEx.PricingEngine_swigregister
PricingEngine_swigregister(PricingEngine)

class Instrument(Observable):
    __swig_setmethods__ = {}
    for _s in [Observable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Instrument, name, value)
    __swig_getmethods__ = {}
    for _s in [Observable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Instrument, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def NPV(self):
        return _QuantLibEx.Instrument_NPV(self)

    def errorEstimate(self):
        return _QuantLibEx.Instrument_errorEstimate(self)

    def isExpired(self):
        return _QuantLibEx.Instrument_isExpired(self)

    def setPricingEngine(self, arg2):
        return _QuantLibEx.Instrument_setPricingEngine(self, arg2)

    def recalculate(self):
        return _QuantLibEx.Instrument_recalculate(self)

    def freeze(self):
        return _QuantLibEx.Instrument_freeze(self)

    def unfreeze(self):
        return _QuantLibEx.Instrument_unfreeze(self)
    __swig_destroy__ = _QuantLibEx.delete_Instrument
    __del__ = lambda self: None
Instrument_swigregister = _QuantLibEx.Instrument_swigregister
Instrument_swigregister(Instrument)

class InstrumentVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InstrumentVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InstrumentVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _QuantLibEx.InstrumentVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _QuantLibEx.InstrumentVector___nonzero__(self)

    def __bool__(self):
        return _QuantLibEx.InstrumentVector___bool__(self)

    def __len__(self):
        return _QuantLibEx.InstrumentVector___len__(self)

    def __getslice__(self, i, j):
        return _QuantLibEx.InstrumentVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _QuantLibEx.InstrumentVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _QuantLibEx.InstrumentVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _QuantLibEx.InstrumentVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _QuantLibEx.InstrumentVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _QuantLibEx.InstrumentVector___setitem__(self, *args)

    def pop(self):
        return _QuantLibEx.InstrumentVector_pop(self)

    def append(self, x):
        return _QuantLibEx.InstrumentVector_append(self, x)

    def empty(self):
        return _QuantLibEx.InstrumentVector_empty(self)

    def size(self):
        return _QuantLibEx.InstrumentVector_size(self)

    def swap(self, v):
        return _QuantLibEx.InstrumentVector_swap(self, v)

    def begin(self):
        return _QuantLibEx.InstrumentVector_begin(self)

    def end(self):
        return _QuantLibEx.InstrumentVector_end(self)

    def rbegin(self):
        return _QuantLibEx.InstrumentVector_rbegin(self)

    def rend(self):
        return _QuantLibEx.InstrumentVector_rend(self)

    def clear(self):
        return _QuantLibEx.InstrumentVector_clear(self)

    def get_allocator(self):
        return _QuantLibEx.InstrumentVector_get_allocator(self)

    def pop_back(self):
        return _QuantLibEx.InstrumentVector_pop_back(self)

    def erase(self, *args):
        return _QuantLibEx.InstrumentVector_erase(self, *args)

    def __init__(self, *args):
        this = _QuantLibEx.new_InstrumentVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _QuantLibEx.InstrumentVector_push_back(self, x)

    def front(self):
        return _QuantLibEx.InstrumentVector_front(self)

    def back(self):
        return _QuantLibEx.InstrumentVector_back(self)

    def assign(self, n, x):
        return _QuantLibEx.InstrumentVector_assign(self, n, x)

    def resize(self, *args):
        return _QuantLibEx.InstrumentVector_resize(self, *args)

    def insert(self, *args):
        return _QuantLibEx.InstrumentVector_insert(self, *args)

    def reserve(self, n):
        return _QuantLibEx.InstrumentVector_reserve(self, n)

    def capacity(self):
        return _QuantLibEx.InstrumentVector_capacity(self)
    __swig_destroy__ = _QuantLibEx.delete_InstrumentVector
    __del__ = lambda self: None
InstrumentVector_swigregister = _QuantLibEx.InstrumentVector_swigregister
InstrumentVector_swigregister(InstrumentVector)

class Stock(Instrument):
    __swig_setmethods__ = {}
    for _s in [Instrument]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stock, name, value)
    __swig_getmethods__ = {}
    for _s in [Instrument]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Stock, name)
    __repr__ = _swig_repr

    def __init__(self, quote):
        this = _QuantLibEx.new_Stock(quote)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_Stock
    __del__ = lambda self: None
Stock_swigregister = _QuantLibEx.Stock_swigregister
Stock_swigregister(Stock)

class CompositeInstrument(Instrument):
    __swig_setmethods__ = {}
    for _s in [Instrument]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CompositeInstrument, name, value)
    __swig_getmethods__ = {}
    for _s in [Instrument]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CompositeInstrument, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLibEx.new_CompositeInstrument()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def add(self, instrument, multiplier=1.0):
        return _QuantLibEx.CompositeInstrument_add(self, instrument, multiplier)

    def subtract(self, instrument, multiplier=1.0):
        return _QuantLibEx.CompositeInstrument_subtract(self, instrument, multiplier)
    __swig_destroy__ = _QuantLibEx.delete_CompositeInstrument
    __del__ = lambda self: None
CompositeInstrument_swigregister = _QuantLibEx.CompositeInstrument_swigregister
CompositeInstrument_swigregister(CompositeInstrument)

Sunday = _QuantLibEx.Sunday
Monday = _QuantLibEx.Monday
Tuesday = _QuantLibEx.Tuesday
Wednesday = _QuantLibEx.Wednesday
Thursday = _QuantLibEx.Thursday
Friday = _QuantLibEx.Friday
Saturday = _QuantLibEx.Saturday
January = _QuantLibEx.January
February = _QuantLibEx.February
March = _QuantLibEx.March
April = _QuantLibEx.April
May = _QuantLibEx.May
June = _QuantLibEx.June
July = _QuantLibEx.July
August = _QuantLibEx.August
September = _QuantLibEx.September
October = _QuantLibEx.October
November = _QuantLibEx.November
December = _QuantLibEx.December
Days = _QuantLibEx.Days
Weeks = _QuantLibEx.Weeks
Months = _QuantLibEx.Months
Years = _QuantLibEx.Years
NoFrequency = _QuantLibEx.NoFrequency
Once = _QuantLibEx.Once
Annual = _QuantLibEx.Annual
Semiannual = _QuantLibEx.Semiannual
EveryFourthMonth = _QuantLibEx.EveryFourthMonth
Quarterly = _QuantLibEx.Quarterly
Bimonthly = _QuantLibEx.Bimonthly
Monthly = _QuantLibEx.Monthly
EveryFourthWeek = _QuantLibEx.EveryFourthWeek
Biweekly = _QuantLibEx.Biweekly
Weekly = _QuantLibEx.Weekly
Daily = _QuantLibEx.Daily
OtherFrequency = _QuantLibEx.OtherFrequency
class Period(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Period, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Period, name)

    def length(self):
        return _QuantLibEx.Period_length(self)

    def units(self):
        return _QuantLibEx.Period_units(self)

    def frequency(self):
        return _QuantLibEx.Period_frequency(self)

    def __init__(self, *args):
        this = _QuantLibEx.new_Period(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __str__(self):
        return _QuantLibEx.Period___str__(self)

    def __repr__(self):
        return _QuantLibEx.Period___repr__(self)

    def __neg__(self):
        return _QuantLibEx.Period___neg__(self)

    def __mul__(self, n):
        return _QuantLibEx.Period___mul__(self, n)

    def __rmul__(self, n):
        return _QuantLibEx.Period___rmul__(self, n)

    def __lt__(self, other):
        return _QuantLibEx.Period___lt__(self, other)

    def __gt__(self, other):
        return _QuantLibEx.Period___gt__(self, other)

    def __le__(self, other):
        return _QuantLibEx.Period___le__(self, other)

    def __ge__(self, other):
        return _QuantLibEx.Period___ge__(self, other)

    def __eq__(self, other):
        return _QuantLibEx.Period___eq__(self, other)

    def __cmp__(self, other):
        return _QuantLibEx.Period___cmp__(self, other)

    def __hash__(self):
        return hash(str(self))

    __swig_destroy__ = _QuantLibEx.delete_Period
    __del__ = lambda self: None
Period_swigregister = _QuantLibEx.Period_swigregister
Period_swigregister(Period)

class PeriodVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PeriodVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PeriodVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _QuantLibEx.PeriodVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _QuantLibEx.PeriodVector___nonzero__(self)

    def __bool__(self):
        return _QuantLibEx.PeriodVector___bool__(self)

    def __len__(self):
        return _QuantLibEx.PeriodVector___len__(self)

    def __getslice__(self, i, j):
        return _QuantLibEx.PeriodVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _QuantLibEx.PeriodVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _QuantLibEx.PeriodVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _QuantLibEx.PeriodVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _QuantLibEx.PeriodVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _QuantLibEx.PeriodVector___setitem__(self, *args)

    def pop(self):
        return _QuantLibEx.PeriodVector_pop(self)

    def append(self, x):
        return _QuantLibEx.PeriodVector_append(self, x)

    def empty(self):
        return _QuantLibEx.PeriodVector_empty(self)

    def size(self):
        return _QuantLibEx.PeriodVector_size(self)

    def swap(self, v):
        return _QuantLibEx.PeriodVector_swap(self, v)

    def begin(self):
        return _QuantLibEx.PeriodVector_begin(self)

    def end(self):
        return _QuantLibEx.PeriodVector_end(self)

    def rbegin(self):
        return _QuantLibEx.PeriodVector_rbegin(self)

    def rend(self):
        return _QuantLibEx.PeriodVector_rend(self)

    def clear(self):
        return _QuantLibEx.PeriodVector_clear(self)

    def get_allocator(self):
        return _QuantLibEx.PeriodVector_get_allocator(self)

    def pop_back(self):
        return _QuantLibEx.PeriodVector_pop_back(self)

    def erase(self, *args):
        return _QuantLibEx.PeriodVector_erase(self, *args)

    def __init__(self, *args):
        this = _QuantLibEx.new_PeriodVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _QuantLibEx.PeriodVector_push_back(self, x)

    def front(self):
        return _QuantLibEx.PeriodVector_front(self)

    def back(self):
        return _QuantLibEx.PeriodVector_back(self)

    def assign(self, n, x):
        return _QuantLibEx.PeriodVector_assign(self, n, x)

    def resize(self, *args):
        return _QuantLibEx.PeriodVector_resize(self, *args)

    def insert(self, *args):
        return _QuantLibEx.PeriodVector_insert(self, *args)

    def reserve(self, n):
        return _QuantLibEx.PeriodVector_reserve(self, n)

    def capacity(self):
        return _QuantLibEx.PeriodVector_capacity(self)
    __swig_destroy__ = _QuantLibEx.delete_PeriodVector
    __del__ = lambda self: None
PeriodVector_swigregister = _QuantLibEx.PeriodVector_swigregister
PeriodVector_swigregister(PeriodVector)


import datetime as _datetime

class Date(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Date, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Date, name)

    def weekday(self):
        return _QuantLibEx.Date_weekday(self)

    def dayOfMonth(self):
        return _QuantLibEx.Date_dayOfMonth(self)

    def dayOfYear(self):
        return _QuantLibEx.Date_dayOfYear(self)

    def month(self):
        return _QuantLibEx.Date_month(self)

    def year(self):
        return _QuantLibEx.Date_year(self)

    def serialNumber(self):
        return _QuantLibEx.Date_serialNumber(self)
    if _newclass:
        isLeap = staticmethod(_QuantLibEx.Date_isLeap)
    else:
        isLeap = _QuantLibEx.Date_isLeap
    if _newclass:
        minDate = staticmethod(_QuantLibEx.Date_minDate)
    else:
        minDate = _QuantLibEx.Date_minDate
    if _newclass:
        maxDate = staticmethod(_QuantLibEx.Date_maxDate)
    else:
        maxDate = _QuantLibEx.Date_maxDate
    if _newclass:
        todaysDate = staticmethod(_QuantLibEx.Date_todaysDate)
    else:
        todaysDate = _QuantLibEx.Date_todaysDate
    if _newclass:
        endOfMonth = staticmethod(_QuantLibEx.Date_endOfMonth)
    else:
        endOfMonth = _QuantLibEx.Date_endOfMonth
    if _newclass:
        isEndOfMonth = staticmethod(_QuantLibEx.Date_isEndOfMonth)
    else:
        isEndOfMonth = _QuantLibEx.Date_isEndOfMonth
    if _newclass:
        nextWeekday = staticmethod(_QuantLibEx.Date_nextWeekday)
    else:
        nextWeekday = _QuantLibEx.Date_nextWeekday
    if _newclass:
        nthWeekday = staticmethod(_QuantLibEx.Date_nthWeekday)
    else:
        nthWeekday = _QuantLibEx.Date_nthWeekday

    def __add__(self, *args):
        return _QuantLibEx.Date___add__(self, *args)

    def __init__(self, *args):
        this = _QuantLibEx.new_Date(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def weekdayNumber(self):
        return _QuantLibEx.Date_weekdayNumber(self)

    def __str__(self):
        return _QuantLibEx.Date___str__(self)

    def __repr__(self):
        return _QuantLibEx.Date___repr__(self)

    def ISO(self):
        return _QuantLibEx.Date_ISO(self)

    def __sub__(self, *args):
        return _QuantLibEx.Date___sub__(self, *args)

    def __eq__(self, other):
        return _QuantLibEx.Date___eq__(self, other)

    def __cmp__(self, other):
        return _QuantLibEx.Date___cmp__(self, other)

    def __nonzero__(self):
        return _QuantLibEx.Date___nonzero__(self)

    def __bool__(self):
        return _QuantLibEx.Date___bool__(self)

    def __hash__(self):
        return _QuantLibEx.Date___hash__(self)

    def __lt__(self, other):
        return _QuantLibEx.Date___lt__(self, other)

    def __gt__(self, other):
        return _QuantLibEx.Date___gt__(self, other)

    def __le__(self, other):
        return _QuantLibEx.Date___le__(self, other)

    def __ge__(self, other):
        return _QuantLibEx.Date___ge__(self, other)

    def __ne__(self, other):
        return _QuantLibEx.Date___ne__(self, other)

    def to_date(self):
        return _datetime.date(self.year(), self.month(), self.dayOfMonth())

    @staticmethod
    def from_date(date):
        return Date(date.day, date.month, date.year)

    __swig_destroy__ = _QuantLibEx.delete_Date
    __del__ = lambda self: None
Date_swigregister = _QuantLibEx.Date_swigregister
Date_swigregister(Date)

def Date_isLeap(y):
    return _QuantLibEx.Date_isLeap(y)
Date_isLeap = _QuantLibEx.Date_isLeap

def Date_minDate():
    return _QuantLibEx.Date_minDate()
Date_minDate = _QuantLibEx.Date_minDate

def Date_maxDate():
    return _QuantLibEx.Date_maxDate()
Date_maxDate = _QuantLibEx.Date_maxDate

def Date_todaysDate():
    return _QuantLibEx.Date_todaysDate()
Date_todaysDate = _QuantLibEx.Date_todaysDate

def Date_endOfMonth(arg2):
    return _QuantLibEx.Date_endOfMonth(arg2)
Date_endOfMonth = _QuantLibEx.Date_endOfMonth

def Date_isEndOfMonth(arg2):
    return _QuantLibEx.Date_isEndOfMonth(arg2)
Date_isEndOfMonth = _QuantLibEx.Date_isEndOfMonth

def Date_nextWeekday(arg2, arg3):
    return _QuantLibEx.Date_nextWeekday(arg2, arg3)
Date_nextWeekday = _QuantLibEx.Date_nextWeekday

def Date_nthWeekday(n, arg3, m, y):
    return _QuantLibEx.Date_nthWeekday(n, arg3, m, y)
Date_nthWeekday = _QuantLibEx.Date_nthWeekday

class DateParser(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DateParser, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DateParser, name)
    __repr__ = _swig_repr
    if _newclass:
        parseFormatted = staticmethod(_QuantLibEx.DateParser_parseFormatted)
    else:
        parseFormatted = _QuantLibEx.DateParser_parseFormatted
    if _newclass:
        parseISO = staticmethod(_QuantLibEx.DateParser_parseISO)
    else:
        parseISO = _QuantLibEx.DateParser_parseISO
    if _newclass:
        parse = staticmethod(_QuantLibEx.DateParser_parse)
    else:
        parse = _QuantLibEx.DateParser_parse

    def __init__(self):
        this = _QuantLibEx.new_DateParser()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_DateParser
    __del__ = lambda self: None
DateParser_swigregister = _QuantLibEx.DateParser_swigregister
DateParser_swigregister(DateParser)

def DateParser_parseFormatted(str, fmt):
    return _QuantLibEx.DateParser_parseFormatted(str, fmt)
DateParser_parseFormatted = _QuantLibEx.DateParser_parseFormatted

def DateParser_parseISO(str):
    return _QuantLibEx.DateParser_parseISO(str)
DateParser_parseISO = _QuantLibEx.DateParser_parseISO

def DateParser_parse(str, fmt):
    return _QuantLibEx.DateParser_parse(str, fmt)
DateParser_parse = _QuantLibEx.DateParser_parse

class PeriodParser(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PeriodParser, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PeriodParser, name)
    __repr__ = _swig_repr
    if _newclass:
        parse = staticmethod(_QuantLibEx.PeriodParser_parse)
    else:
        parse = _QuantLibEx.PeriodParser_parse

    def __init__(self):
        this = _QuantLibEx.new_PeriodParser()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_PeriodParser
    __del__ = lambda self: None
PeriodParser_swigregister = _QuantLibEx.PeriodParser_swigregister
PeriodParser_swigregister(PeriodParser)

def PeriodParser_parse(str):
    return _QuantLibEx.PeriodParser_parse(str)
PeriodParser_parse = _QuantLibEx.PeriodParser_parse


Date._old___add__ = Date.__add__
Date._old___sub__ = Date.__sub__
def Date_new___add__(self,x):
    if type(x) is tuple and len(x) == 2:
        return self._old___add__(Period(x[0],x[1]))
    else:
        return self._old___add__(x)
def Date_new___sub__(self,x):
    if type(x) is tuple and len(x) == 2:
        return self._old___sub__(Period(x[0],x[1]))
    else:
        return self._old___sub__(x)
Date.__add__ = Date_new___add__
Date.__sub__ = Date_new___sub__

class DateVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DateVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DateVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _QuantLibEx.DateVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _QuantLibEx.DateVector___nonzero__(self)

    def __bool__(self):
        return _QuantLibEx.DateVector___bool__(self)

    def __len__(self):
        return _QuantLibEx.DateVector___len__(self)

    def __getslice__(self, i, j):
        return _QuantLibEx.DateVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _QuantLibEx.DateVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _QuantLibEx.DateVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _QuantLibEx.DateVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _QuantLibEx.DateVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _QuantLibEx.DateVector___setitem__(self, *args)

    def pop(self):
        return _QuantLibEx.DateVector_pop(self)

    def append(self, x):
        return _QuantLibEx.DateVector_append(self, x)

    def empty(self):
        return _QuantLibEx.DateVector_empty(self)

    def size(self):
        return _QuantLibEx.DateVector_size(self)

    def swap(self, v):
        return _QuantLibEx.DateVector_swap(self, v)

    def begin(self):
        return _QuantLibEx.DateVector_begin(self)

    def end(self):
        return _QuantLibEx.DateVector_end(self)

    def rbegin(self):
        return _QuantLibEx.DateVector_rbegin(self)

    def rend(self):
        return _QuantLibEx.DateVector_rend(self)

    def clear(self):
        return _QuantLibEx.DateVector_clear(self)

    def get_allocator(self):
        return _QuantLibEx.DateVector_get_allocator(self)

    def pop_back(self):
        return _QuantLibEx.DateVector_pop_back(self)

    def erase(self, *args):
        return _QuantLibEx.DateVector_erase(self, *args)

    def __init__(self, *args):
        this = _QuantLibEx.new_DateVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _QuantLibEx.DateVector_push_back(self, x)

    def front(self):
        return _QuantLibEx.DateVector_front(self)

    def back(self):
        return _QuantLibEx.DateVector_back(self)

    def assign(self, n, x):
        return _QuantLibEx.DateVector_assign(self, n, x)

    def resize(self, *args):
        return _QuantLibEx.DateVector_resize(self, *args)

    def insert(self, *args):
        return _QuantLibEx.DateVector_insert(self, *args)

    def reserve(self, n):
        return _QuantLibEx.DateVector_reserve(self, n)

    def capacity(self):
        return _QuantLibEx.DateVector_capacity(self)
    __swig_destroy__ = _QuantLibEx.delete_DateVector
    __del__ = lambda self: None
DateVector_swigregister = _QuantLibEx.DateVector_swigregister
DateVector_swigregister(DateVector)


def daysBetween(arg1, arg2):
    return _QuantLibEx.daysBetween(arg1, arg2)
daysBetween = _QuantLibEx.daysBetween
class IMM(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IMM, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IMM, name)
    __repr__ = _swig_repr
    F = _QuantLibEx.IMM_F
    G = _QuantLibEx.IMM_G
    H = _QuantLibEx.IMM_H
    J = _QuantLibEx.IMM_J
    K = _QuantLibEx.IMM_K
    M = _QuantLibEx.IMM_M
    N = _QuantLibEx.IMM_N
    Q = _QuantLibEx.IMM_Q
    U = _QuantLibEx.IMM_U
    V = _QuantLibEx.IMM_V
    X = _QuantLibEx.IMM_X
    Z = _QuantLibEx.IMM_Z
    if _newclass:
        isIMMdate = staticmethod(_QuantLibEx.IMM_isIMMdate)
    else:
        isIMMdate = _QuantLibEx.IMM_isIMMdate
    if _newclass:
        isIMMcode = staticmethod(_QuantLibEx.IMM_isIMMcode)
    else:
        isIMMcode = _QuantLibEx.IMM_isIMMcode
    if _newclass:
        code = staticmethod(_QuantLibEx.IMM_code)
    else:
        code = _QuantLibEx.IMM_code
    if _newclass:
        date = staticmethod(_QuantLibEx.IMM_date)
    else:
        date = _QuantLibEx.IMM_date
    if _newclass:
        nextDate = staticmethod(_QuantLibEx.IMM_nextDate)
    else:
        nextDate = _QuantLibEx.IMM_nextDate
    if _newclass:
        nextCode = staticmethod(_QuantLibEx.IMM_nextCode)
    else:
        nextCode = _QuantLibEx.IMM_nextCode

    def __init__(self):
        this = _QuantLibEx.new_IMM()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_IMM
    __del__ = lambda self: None
IMM_swigregister = _QuantLibEx.IMM_swigregister
IMM_swigregister(IMM)

def IMM_isIMMdate(d, mainCycle=True):
    return _QuantLibEx.IMM_isIMMdate(d, mainCycle)
IMM_isIMMdate = _QuantLibEx.IMM_isIMMdate

def IMM_isIMMcode(code, mainCycle=True):
    return _QuantLibEx.IMM_isIMMcode(code, mainCycle)
IMM_isIMMcode = _QuantLibEx.IMM_isIMMcode

def IMM_code(immDate):
    return _QuantLibEx.IMM_code(immDate)
IMM_code = _QuantLibEx.IMM_code

def IMM_date(*args):
    return _QuantLibEx.IMM_date(*args)
IMM_date = _QuantLibEx.IMM_date

def IMM_nextDate(*args):
    return _QuantLibEx.IMM_nextDate(*args)
IMM_nextDate = _QuantLibEx.IMM_nextDate

def IMM_nextCode(*args):
    return _QuantLibEx.IMM_nextCode(*args)
IMM_nextCode = _QuantLibEx.IMM_nextCode

class ASX(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ASX, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ASX, name)
    __repr__ = _swig_repr
    F = _QuantLibEx.ASX_F
    G = _QuantLibEx.ASX_G
    H = _QuantLibEx.ASX_H
    J = _QuantLibEx.ASX_J
    K = _QuantLibEx.ASX_K
    M = _QuantLibEx.ASX_M
    N = _QuantLibEx.ASX_N
    Q = _QuantLibEx.ASX_Q
    U = _QuantLibEx.ASX_U
    V = _QuantLibEx.ASX_V
    X = _QuantLibEx.ASX_X
    Z = _QuantLibEx.ASX_Z
    if _newclass:
        isASXdate = staticmethod(_QuantLibEx.ASX_isASXdate)
    else:
        isASXdate = _QuantLibEx.ASX_isASXdate
    if _newclass:
        isASXcode = staticmethod(_QuantLibEx.ASX_isASXcode)
    else:
        isASXcode = _QuantLibEx.ASX_isASXcode
    if _newclass:
        code = staticmethod(_QuantLibEx.ASX_code)
    else:
        code = _QuantLibEx.ASX_code
    if _newclass:
        date = staticmethod(_QuantLibEx.ASX_date)
    else:
        date = _QuantLibEx.ASX_date
    if _newclass:
        nextDate = staticmethod(_QuantLibEx.ASX_nextDate)
    else:
        nextDate = _QuantLibEx.ASX_nextDate
    if _newclass:
        nextCode = staticmethod(_QuantLibEx.ASX_nextCode)
    else:
        nextCode = _QuantLibEx.ASX_nextCode

    def __init__(self):
        this = _QuantLibEx.new_ASX()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_ASX
    __del__ = lambda self: None
ASX_swigregister = _QuantLibEx.ASX_swigregister
ASX_swigregister(ASX)

def ASX_isASXdate(d, mainCycle=True):
    return _QuantLibEx.ASX_isASXdate(d, mainCycle)
ASX_isASXdate = _QuantLibEx.ASX_isASXdate

def ASX_isASXcode(code, mainCycle=True):
    return _QuantLibEx.ASX_isASXcode(code, mainCycle)
ASX_isASXcode = _QuantLibEx.ASX_isASXcode

def ASX_code(asxDate):
    return _QuantLibEx.ASX_code(asxDate)
ASX_code = _QuantLibEx.ASX_code

def ASX_date(*args):
    return _QuantLibEx.ASX_date(*args)
ASX_date = _QuantLibEx.ASX_date

def ASX_nextDate(*args):
    return _QuantLibEx.ASX_nextDate(*args)
ASX_nextDate = _QuantLibEx.ASX_nextDate

def ASX_nextCode(*args):
    return _QuantLibEx.ASX_nextCode(*args)
ASX_nextCode = _QuantLibEx.ASX_nextCode

Following = _QuantLibEx.Following
ModifiedFollowing = _QuantLibEx.ModifiedFollowing
Preceding = _QuantLibEx.Preceding
ModifiedPreceding = _QuantLibEx.ModifiedPreceding
Unadjusted = _QuantLibEx.Unadjusted
HalfMonthModifiedFollowing = _QuantLibEx.HalfMonthModifiedFollowing
JoinHolidays = _QuantLibEx.JoinHolidays
JoinBusinessDays = _QuantLibEx.JoinBusinessDays
class Calendar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Calendar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Calendar, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isWeekend(self, w):
        return _QuantLibEx.Calendar_isWeekend(self, w)

    def endOfMonth(self, arg2):
        return _QuantLibEx.Calendar_endOfMonth(self, arg2)

    def isBusinessDay(self, arg2):
        return _QuantLibEx.Calendar_isBusinessDay(self, arg2)

    def isHoliday(self, arg2):
        return _QuantLibEx.Calendar_isHoliday(self, arg2)

    def isEndOfMonth(self, arg2):
        return _QuantLibEx.Calendar_isEndOfMonth(self, arg2)

    def addHoliday(self, arg2):
        return _QuantLibEx.Calendar_addHoliday(self, arg2)

    def removeHoliday(self, arg2):
        return _QuantLibEx.Calendar_removeHoliday(self, arg2)

    def adjust(self, *args):
        return _QuantLibEx.Calendar_adjust(self, *args)

    def advance(self, *args):
        return _QuantLibEx.Calendar_advance(self, *args)

    def businessDaysBetween(self, arg2, to, includeFirst=True, includeLast=False):
        return _QuantLibEx.Calendar_businessDaysBetween(self, arg2, to, includeFirst, includeLast)
    if _newclass:
        holidayList = staticmethod(_QuantLibEx.Calendar_holidayList)
    else:
        holidayList = _QuantLibEx.Calendar_holidayList

    def name(self):
        return _QuantLibEx.Calendar_name(self)

    def __str__(self):
        return _QuantLibEx.Calendar___str__(self)

    def __eq__(self, other):
        return _QuantLibEx.Calendar___eq__(self, other)

    def __ne__(self, other):
        return _QuantLibEx.Calendar___ne__(self, other)

    def __hash__(self):
        return hash(self.name())

    __swig_destroy__ = _QuantLibEx.delete_Calendar
    __del__ = lambda self: None
Calendar_swigregister = _QuantLibEx.Calendar_swigregister
Calendar_swigregister(Calendar)

def Calendar_holidayList(calendar, arg2, to, includeWeekEnds=False):
    return _QuantLibEx.Calendar_holidayList(calendar, arg2, to, includeWeekEnds)
Calendar_holidayList = _QuantLibEx.Calendar_holidayList

class Argentina(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Argentina, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Argentina, name)
    __repr__ = _swig_repr
    Merval = _QuantLibEx.Argentina_Merval

    def __init__(self, *args):
        this = _QuantLibEx.new_Argentina(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_Argentina
    __del__ = lambda self: None
Argentina_swigregister = _QuantLibEx.Argentina_swigregister
Argentina_swigregister(Argentina)

class Australia(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Australia, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Australia, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLibEx.new_Australia()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_Australia
    __del__ = lambda self: None
Australia_swigregister = _QuantLibEx.Australia_swigregister
Australia_swigregister(Australia)

class Brazil(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Brazil, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Brazil, name)
    __repr__ = _swig_repr
    Settlement = _QuantLibEx.Brazil_Settlement
    Exchange = _QuantLibEx.Brazil_Exchange

    def __init__(self, *args):
        this = _QuantLibEx.new_Brazil(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_Brazil
    __del__ = lambda self: None
Brazil_swigregister = _QuantLibEx.Brazil_swigregister
Brazil_swigregister(Brazil)

class Canada(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Canada, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Canada, name)
    __repr__ = _swig_repr
    Settlement = _QuantLibEx.Canada_Settlement
    TSX = _QuantLibEx.Canada_TSX

    def __init__(self, *args):
        this = _QuantLibEx.new_Canada(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_Canada
    __del__ = lambda self: None
Canada_swigregister = _QuantLibEx.Canada_swigregister
Canada_swigregister(Canada)

class China(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, China, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, China, name)
    __repr__ = _swig_repr
    SSE = _QuantLibEx.China_SSE
    IB = _QuantLibEx.China_IB

    def __init__(self, *args):
        this = _QuantLibEx.new_China(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_China
    __del__ = lambda self: None
China_swigregister = _QuantLibEx.China_swigregister
China_swigregister(China)

class CzechRepublic(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CzechRepublic, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CzechRepublic, name)
    __repr__ = _swig_repr
    PSE = _QuantLibEx.CzechRepublic_PSE

    def __init__(self, *args):
        this = _QuantLibEx.new_CzechRepublic(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_CzechRepublic
    __del__ = lambda self: None
CzechRepublic_swigregister = _QuantLibEx.CzechRepublic_swigregister
CzechRepublic_swigregister(CzechRepublic)

class Denmark(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Denmark, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Denmark, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLibEx.new_Denmark()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_Denmark
    __del__ = lambda self: None
Denmark_swigregister = _QuantLibEx.Denmark_swigregister
Denmark_swigregister(Denmark)

class Finland(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Finland, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Finland, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLibEx.new_Finland()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_Finland
    __del__ = lambda self: None
Finland_swigregister = _QuantLibEx.Finland_swigregister
Finland_swigregister(Finland)

class Germany(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Germany, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Germany, name)
    __repr__ = _swig_repr
    Settlement = _QuantLibEx.Germany_Settlement
    FrankfurtStockExchange = _QuantLibEx.Germany_FrankfurtStockExchange
    Xetra = _QuantLibEx.Germany_Xetra
    Eurex = _QuantLibEx.Germany_Eurex

    def __init__(self, *args):
        this = _QuantLibEx.new_Germany(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_Germany
    __del__ = lambda self: None
Germany_swigregister = _QuantLibEx.Germany_swigregister
Germany_swigregister(Germany)

class HongKong(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HongKong, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HongKong, name)
    __repr__ = _swig_repr
    HKEx = _QuantLibEx.HongKong_HKEx

    def __init__(self, *args):
        this = _QuantLibEx.new_HongKong(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_HongKong
    __del__ = lambda self: None
HongKong_swigregister = _QuantLibEx.HongKong_swigregister
HongKong_swigregister(HongKong)

class Hungary(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Hungary, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Hungary, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLibEx.new_Hungary()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_Hungary
    __del__ = lambda self: None
Hungary_swigregister = _QuantLibEx.Hungary_swigregister
Hungary_swigregister(Hungary)

class Iceland(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Iceland, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Iceland, name)
    __repr__ = _swig_repr
    ICEX = _QuantLibEx.Iceland_ICEX

    def __init__(self, *args):
        this = _QuantLibEx.new_Iceland(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_Iceland
    __del__ = lambda self: None
Iceland_swigregister = _QuantLibEx.Iceland_swigregister
Iceland_swigregister(Iceland)

class India(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, India, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, India, name)
    __repr__ = _swig_repr
    NSE = _QuantLibEx.India_NSE

    def __init__(self, *args):
        this = _QuantLibEx.new_India(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_India
    __del__ = lambda self: None
India_swigregister = _QuantLibEx.India_swigregister
India_swigregister(India)

class Indonesia(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Indonesia, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Indonesia, name)
    __repr__ = _swig_repr
    BEJ = _QuantLibEx.Indonesia_BEJ
    JSX = _QuantLibEx.Indonesia_JSX

    def __init__(self, *args):
        this = _QuantLibEx.new_Indonesia(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_Indonesia
    __del__ = lambda self: None
Indonesia_swigregister = _QuantLibEx.Indonesia_swigregister
Indonesia_swigregister(Indonesia)

class Israel(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Israel, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Israel, name)
    __repr__ = _swig_repr
    Settlement = _QuantLibEx.Israel_Settlement
    TASE = _QuantLibEx.Israel_TASE

    def __init__(self, *args):
        this = _QuantLibEx.new_Israel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_Israel
    __del__ = lambda self: None
Israel_swigregister = _QuantLibEx.Israel_swigregister
Israel_swigregister(Israel)

class Italy(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Italy, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Italy, name)
    __repr__ = _swig_repr
    Settlement = _QuantLibEx.Italy_Settlement
    Exchange = _QuantLibEx.Italy_Exchange

    def __init__(self, *args):
        this = _QuantLibEx.new_Italy(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_Italy
    __del__ = lambda self: None
Italy_swigregister = _QuantLibEx.Italy_swigregister
Italy_swigregister(Italy)

class Japan(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Japan, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Japan, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLibEx.new_Japan()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_Japan
    __del__ = lambda self: None
Japan_swigregister = _QuantLibEx.Japan_swigregister
Japan_swigregister(Japan)

class Mexico(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mexico, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Mexico, name)
    __repr__ = _swig_repr
    BMV = _QuantLibEx.Mexico_BMV

    def __init__(self, *args):
        this = _QuantLibEx.new_Mexico(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_Mexico
    __del__ = lambda self: None
Mexico_swigregister = _QuantLibEx.Mexico_swigregister
Mexico_swigregister(Mexico)

class NewZealand(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NewZealand, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NewZealand, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLibEx.new_NewZealand()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_NewZealand
    __del__ = lambda self: None
NewZealand_swigregister = _QuantLibEx.NewZealand_swigregister
NewZealand_swigregister(NewZealand)

class Norway(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Norway, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Norway, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLibEx.new_Norway()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_Norway
    __del__ = lambda self: None
Norway_swigregister = _QuantLibEx.Norway_swigregister
Norway_swigregister(Norway)

class Poland(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Poland, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Poland, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLibEx.new_Poland()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_Poland
    __del__ = lambda self: None
Poland_swigregister = _QuantLibEx.Poland_swigregister
Poland_swigregister(Poland)

class Russia(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Russia, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Russia, name)
    __repr__ = _swig_repr
    Settlement = _QuantLibEx.Russia_Settlement
    MOEX = _QuantLibEx.Russia_MOEX

    def __init__(self, *args):
        this = _QuantLibEx.new_Russia(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_Russia
    __del__ = lambda self: None
Russia_swigregister = _QuantLibEx.Russia_swigregister
Russia_swigregister(Russia)

class Romania(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Romania, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Romania, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLibEx.new_Romania()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_Romania
    __del__ = lambda self: None
Romania_swigregister = _QuantLibEx.Romania_swigregister
Romania_swigregister(Romania)

class SaudiArabia(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SaudiArabia, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SaudiArabia, name)
    __repr__ = _swig_repr
    Tadawul = _QuantLibEx.SaudiArabia_Tadawul

    def __init__(self, *args):
        this = _QuantLibEx.new_SaudiArabia(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_SaudiArabia
    __del__ = lambda self: None
SaudiArabia_swigregister = _QuantLibEx.SaudiArabia_swigregister
SaudiArabia_swigregister(SaudiArabia)

class Singapore(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Singapore, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Singapore, name)
    __repr__ = _swig_repr
    SGX = _QuantLibEx.Singapore_SGX

    def __init__(self, *args):
        this = _QuantLibEx.new_Singapore(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_Singapore
    __del__ = lambda self: None
Singapore_swigregister = _QuantLibEx.Singapore_swigregister
Singapore_swigregister(Singapore)

class Slovakia(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Slovakia, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Slovakia, name)
    __repr__ = _swig_repr
    BSSE = _QuantLibEx.Slovakia_BSSE

    def __init__(self, *args):
        this = _QuantLibEx.new_Slovakia(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_Slovakia
    __del__ = lambda self: None
Slovakia_swigregister = _QuantLibEx.Slovakia_swigregister
Slovakia_swigregister(Slovakia)

class SouthAfrica(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SouthAfrica, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SouthAfrica, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLibEx.new_SouthAfrica()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_SouthAfrica
    __del__ = lambda self: None
SouthAfrica_swigregister = _QuantLibEx.SouthAfrica_swigregister
SouthAfrica_swigregister(SouthAfrica)

class SouthKorea(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SouthKorea, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SouthKorea, name)
    __repr__ = _swig_repr
    Settlement = _QuantLibEx.SouthKorea_Settlement
    KRX = _QuantLibEx.SouthKorea_KRX

    def __init__(self, *args):
        this = _QuantLibEx.new_SouthKorea(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_SouthKorea
    __del__ = lambda self: None
SouthKorea_swigregister = _QuantLibEx.SouthKorea_swigregister
SouthKorea_swigregister(SouthKorea)

class Sweden(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Sweden, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Sweden, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLibEx.new_Sweden()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_Sweden
    __del__ = lambda self: None
Sweden_swigregister = _QuantLibEx.Sweden_swigregister
Sweden_swigregister(Sweden)

class Switzerland(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Switzerland, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Switzerland, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLibEx.new_Switzerland()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_Switzerland
    __del__ = lambda self: None
Switzerland_swigregister = _QuantLibEx.Switzerland_swigregister
Switzerland_swigregister(Switzerland)

class Taiwan(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Taiwan, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Taiwan, name)
    __repr__ = _swig_repr
    TSEC = _QuantLibEx.Taiwan_TSEC

    def __init__(self, *args):
        this = _QuantLibEx.new_Taiwan(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_Taiwan
    __del__ = lambda self: None
Taiwan_swigregister = _QuantLibEx.Taiwan_swigregister
Taiwan_swigregister(Taiwan)

class TARGET(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TARGET, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TARGET, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLibEx.new_TARGET()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_TARGET
    __del__ = lambda self: None
TARGET_swigregister = _QuantLibEx.TARGET_swigregister
TARGET_swigregister(TARGET)

class Thailand(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Thailand, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Thailand, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLibEx.new_Thailand()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_Thailand
    __del__ = lambda self: None
Thailand_swigregister = _QuantLibEx.Thailand_swigregister
Thailand_swigregister(Thailand)

class Turkey(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Turkey, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Turkey, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLibEx.new_Turkey()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_Turkey
    __del__ = lambda self: None
Turkey_swigregister = _QuantLibEx.Turkey_swigregister
Turkey_swigregister(Turkey)

class Ukraine(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ukraine, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Ukraine, name)
    __repr__ = _swig_repr
    USE = _QuantLibEx.Ukraine_USE

    def __init__(self, *args):
        this = _QuantLibEx.new_Ukraine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_Ukraine
    __del__ = lambda self: None
Ukraine_swigregister = _QuantLibEx.Ukraine_swigregister
Ukraine_swigregister(Ukraine)

class UnitedKingdom(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnitedKingdom, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnitedKingdom, name)
    __repr__ = _swig_repr
    Settlement = _QuantLibEx.UnitedKingdom_Settlement
    Exchange = _QuantLibEx.UnitedKingdom_Exchange
    Metals = _QuantLibEx.UnitedKingdom_Metals

    def __init__(self, *args):
        this = _QuantLibEx.new_UnitedKingdom(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_UnitedKingdom
    __del__ = lambda self: None
UnitedKingdom_swigregister = _QuantLibEx.UnitedKingdom_swigregister
UnitedKingdom_swigregister(UnitedKingdom)

class UnitedStates(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnitedStates, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnitedStates, name)
    __repr__ = _swig_repr
    Settlement = _QuantLibEx.UnitedStates_Settlement
    NYSE = _QuantLibEx.UnitedStates_NYSE
    GovernmentBond = _QuantLibEx.UnitedStates_GovernmentBond
    NERC = _QuantLibEx.UnitedStates_NERC
    LiborImpact = _QuantLibEx.UnitedStates_LiborImpact
    FederalReserve = _QuantLibEx.UnitedStates_FederalReserve

    def __init__(self, *args):
        this = _QuantLibEx.new_UnitedStates(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_UnitedStates
    __del__ = lambda self: None
UnitedStates_swigregister = _QuantLibEx.UnitedStates_swigregister
UnitedStates_swigregister(UnitedStates)

class NullCalendar(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NullCalendar, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NullCalendar, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLibEx.new_NullCalendar()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_NullCalendar
    __del__ = lambda self: None
NullCalendar_swigregister = _QuantLibEx.NullCalendar_swigregister
NullCalendar_swigregister(NullCalendar)

class WeekendsOnly(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WeekendsOnly, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, WeekendsOnly, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLibEx.new_WeekendsOnly()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_WeekendsOnly
    __del__ = lambda self: None
WeekendsOnly_swigregister = _QuantLibEx.WeekendsOnly_swigregister
WeekendsOnly_swigregister(WeekendsOnly)

class JointCalendar(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, JointCalendar, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, JointCalendar, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLibEx.new_JointCalendar(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_JointCalendar
    __del__ = lambda self: None
JointCalendar_swigregister = _QuantLibEx.JointCalendar_swigregister
JointCalendar_swigregister(JointCalendar)

class BespokeCalendar(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BespokeCalendar, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BespokeCalendar, name)
    __repr__ = _swig_repr

    def __init__(self, name):
        this = _QuantLibEx.new_BespokeCalendar(name)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def addWeekend(self, arg2):
        return _QuantLibEx.BespokeCalendar_addWeekend(self, arg2)
    __swig_destroy__ = _QuantLibEx.delete_BespokeCalendar
    __del__ = lambda self: None
BespokeCalendar_swigregister = _QuantLibEx.BespokeCalendar_swigregister
BespokeCalendar_swigregister(BespokeCalendar)


def nullInt():
    return _QuantLibEx.nullInt()
nullInt = _QuantLibEx.nullInt

def nullDouble():
    return _QuantLibEx.nullDouble()
nullDouble = _QuantLibEx.nullDouble
class DateGeneration(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DateGeneration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DateGeneration, name)
    __repr__ = _swig_repr
    Backward = _QuantLibEx.DateGeneration_Backward
    Forward = _QuantLibEx.DateGeneration_Forward
    Zero = _QuantLibEx.DateGeneration_Zero
    ThirdWednesday = _QuantLibEx.DateGeneration_ThirdWednesday
    Twentieth = _QuantLibEx.DateGeneration_Twentieth
    TwentiethIMM = _QuantLibEx.DateGeneration_TwentiethIMM
    OldCDS = _QuantLibEx.DateGeneration_OldCDS
    CDS = _QuantLibEx.DateGeneration_CDS
    CDS2015 = _QuantLibEx.DateGeneration_CDS2015

    def __init__(self):
        this = _QuantLibEx.new_DateGeneration()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_DateGeneration
    __del__ = lambda self: None
DateGeneration_swigregister = _QuantLibEx.DateGeneration_swigregister
DateGeneration_swigregister(DateGeneration)

class Schedule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Schedule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Schedule, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLibEx.new_Schedule(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __len__(self):
        return _QuantLibEx.Schedule___len__(self)

    def previousDate(self, refDate):
        return _QuantLibEx.Schedule_previousDate(self, refDate)

    def nextDate(self, refDate):
        return _QuantLibEx.Schedule_nextDate(self, refDate)

    def hasIsRegular(self):
        return _QuantLibEx.Schedule_hasIsRegular(self)

    def isRegular(self, *args):
        return _QuantLibEx.Schedule_isRegular(self, *args)

    def calendar(self):
        return _QuantLibEx.Schedule_calendar(self)

    def startDate(self):
        return _QuantLibEx.Schedule_startDate(self)

    def endDate(self):
        return _QuantLibEx.Schedule_endDate(self)

    def hasTenor(self):
        return _QuantLibEx.Schedule_hasTenor(self)

    def tenor(self):
        return _QuantLibEx.Schedule_tenor(self)

    def businessDayConvention(self):
        return _QuantLibEx.Schedule_businessDayConvention(self)

    def hasTerminationDateBusinessDayConvention(self):
        return _QuantLibEx.Schedule_hasTerminationDateBusinessDayConvention(self)

    def terminationDateBusinessDayConvention(self):
        return _QuantLibEx.Schedule_terminationDateBusinessDayConvention(self)

    def hasRule(self):
        return _QuantLibEx.Schedule_hasRule(self)

    def rule(self):
        return _QuantLibEx.Schedule_rule(self)

    def hasEndOfMonth(self):
        return _QuantLibEx.Schedule_hasEndOfMonth(self)

    def endOfMonth(self):
        return _QuantLibEx.Schedule_endOfMonth(self)

    def until(self, truncationDate):
        return _QuantLibEx.Schedule_until(self, truncationDate)

    def __getitem__(self, i):
        return _QuantLibEx.Schedule___getitem__(self, i)
    __swig_destroy__ = _QuantLibEx.delete_Schedule
    __del__ = lambda self: None
Schedule_swigregister = _QuantLibEx.Schedule_swigregister
Schedule_swigregister(Schedule)

class _MakeSchedule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _MakeSchedule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _MakeSchedule, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLibEx.new__MakeSchedule()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def fromDate(self, effectiveDate):
        return _QuantLibEx._MakeSchedule_fromDate(self, effectiveDate)

    def to(self, terminationDate):
        return _QuantLibEx._MakeSchedule_to(self, terminationDate)

    def withTenor(self, arg2):
        return _QuantLibEx._MakeSchedule_withTenor(self, arg2)

    def withFrequency(self, arg2):
        return _QuantLibEx._MakeSchedule_withFrequency(self, arg2)

    def withCalendar(self, arg2):
        return _QuantLibEx._MakeSchedule_withCalendar(self, arg2)

    def withConvention(self, arg2):
        return _QuantLibEx._MakeSchedule_withConvention(self, arg2)

    def withTerminationDateConvention(self, arg2):
        return _QuantLibEx._MakeSchedule_withTerminationDateConvention(self, arg2)

    def withRule(self, arg2):
        return _QuantLibEx._MakeSchedule_withRule(self, arg2)

    def forwards(self):
        return _QuantLibEx._MakeSchedule_forwards(self)

    def backwards(self):
        return _QuantLibEx._MakeSchedule_backwards(self)

    def endOfMonth(self, flag=True):
        return _QuantLibEx._MakeSchedule_endOfMonth(self, flag)

    def withFirstDate(self, d):
        return _QuantLibEx._MakeSchedule_withFirstDate(self, d)

    def withNextToLastDate(self, d):
        return _QuantLibEx._MakeSchedule_withNextToLastDate(self, d)

    def schedule(self):
        return _QuantLibEx._MakeSchedule_schedule(self)
    __swig_destroy__ = _QuantLibEx.delete__MakeSchedule
    __del__ = lambda self: None
_MakeSchedule_swigregister = _QuantLibEx._MakeSchedule_swigregister
_MakeSchedule_swigregister(_MakeSchedule)


def MakeSchedule(effectiveDate=None,terminationDate=None,tenor=None,
    frequency=None,calendar=None,convention=None,terminalDateConvention=None,
    rule=None,forwards=False,backwards=False,
    endOfMonth=None,firstDate=None,nextToLastDate=None):
    ms = _MakeSchedule()
    if effectiveDate is not None:
        ms.fromDate(effectiveDate)
    if terminationDate is not None:
        ms.to(terminationDate)
    if tenor is not None:
        ms.withTenor(tenor)
    if frequency is not None:
        ms.withFrequency(frequency)
    if calendar is not None:
        ms.withCalendar(calendar)
    if convention is not None:
        ms.withConvention(convention)
    if terminalDateConvention is not None:
        ms.withTerminationDateConvention(terminalDateConvention)
    if rule is not None:
        ms.withRule(rule)
    if forwards:
        ms.forwards()
    if backwards:
        ms.backwards()
    if endOfMonth is not None:
        ms.endOfMonth(endOfMonth)
    if firstDate is not None:
        ms.withFirstDate(firstDate)
    if nextToLastDate is not None:
        ms.withNextToLastDate(nextToLastDate)
    return ms.schedule()

class DayCounter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DayCounter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DayCounter, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def dayCount(self, d1, d2):
        return _QuantLibEx.DayCounter_dayCount(self, d1, d2)

    def yearFraction(self, *args):
        return _QuantLibEx.DayCounter_yearFraction(self, *args)

    def name(self):
        return _QuantLibEx.DayCounter_name(self)

    def __str__(self):
        return _QuantLibEx.DayCounter___str__(self)

    def __eq__(self, other):
        return _QuantLibEx.DayCounter___eq__(self, other)

    def __ne__(self, other):
        return _QuantLibEx.DayCounter___ne__(self, other)

    def __hash__(self):
        return hash(self.name())

    __swig_destroy__ = _QuantLibEx.delete_DayCounter
    __del__ = lambda self: None
DayCounter_swigregister = _QuantLibEx.DayCounter_swigregister
DayCounter_swigregister(DayCounter)

class Actual360(DayCounter):
    __swig_setmethods__ = {}
    for _s in [DayCounter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Actual360, name, value)
    __swig_getmethods__ = {}
    for _s in [DayCounter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Actual360, name)
    __repr__ = _swig_repr

    def __init__(self, includeLastDay=False):
        this = _QuantLibEx.new_Actual360(includeLastDay)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_Actual360
    __del__ = lambda self: None
Actual360_swigregister = _QuantLibEx.Actual360_swigregister
Actual360_swigregister(Actual360)

class Actual365Fixed(DayCounter):
    __swig_setmethods__ = {}
    for _s in [DayCounter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Actual365Fixed, name, value)
    __swig_getmethods__ = {}
    for _s in [DayCounter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Actual365Fixed, name)
    __repr__ = _swig_repr
    Standard = _QuantLibEx.Actual365Fixed_Standard
    Canadian = _QuantLibEx.Actual365Fixed_Canadian
    NoLeap = _QuantLibEx.Actual365Fixed_NoLeap

    def __init__(self, *args):
        this = _QuantLibEx.new_Actual365Fixed(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_Actual365Fixed
    __del__ = lambda self: None
Actual365Fixed_swigregister = _QuantLibEx.Actual365Fixed_swigregister
Actual365Fixed_swigregister(Actual365Fixed)

class Thirty360(DayCounter):
    __swig_setmethods__ = {}
    for _s in [DayCounter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Thirty360, name, value)
    __swig_getmethods__ = {}
    for _s in [DayCounter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Thirty360, name)
    __repr__ = _swig_repr
    USA = _QuantLibEx.Thirty360_USA
    BondBasis = _QuantLibEx.Thirty360_BondBasis
    European = _QuantLibEx.Thirty360_European
    EurobondBasis = _QuantLibEx.Thirty360_EurobondBasis
    Italian = _QuantLibEx.Thirty360_Italian

    def __init__(self, *args):
        this = _QuantLibEx.new_Thirty360(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_Thirty360
    __del__ = lambda self: None
Thirty360_swigregister = _QuantLibEx.Thirty360_swigregister
Thirty360_swigregister(Thirty360)

class ActualActual(DayCounter):
    __swig_setmethods__ = {}
    for _s in [DayCounter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ActualActual, name, value)
    __swig_getmethods__ = {}
    for _s in [DayCounter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ActualActual, name)
    __repr__ = _swig_repr
    ISMA = _QuantLibEx.ActualActual_ISMA
    Bond = _QuantLibEx.ActualActual_Bond
    ISDA = _QuantLibEx.ActualActual_ISDA
    Historical = _QuantLibEx.ActualActual_Historical
    Actual365 = _QuantLibEx.ActualActual_Actual365
    AFB = _QuantLibEx.ActualActual_AFB
    Euro = _QuantLibEx.ActualActual_Euro

    def __init__(self, *args):
        this = _QuantLibEx.new_ActualActual(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_ActualActual
    __del__ = lambda self: None
ActualActual_swigregister = _QuantLibEx.ActualActual_swigregister
ActualActual_swigregister(ActualActual)

class OneDayCounter(DayCounter):
    __swig_setmethods__ = {}
    for _s in [DayCounter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OneDayCounter, name, value)
    __swig_getmethods__ = {}
    for _s in [DayCounter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OneDayCounter, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLibEx.new_OneDayCounter()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_OneDayCounter
    __del__ = lambda self: None
OneDayCounter_swigregister = _QuantLibEx.OneDayCounter_swigregister
OneDayCounter_swigregister(OneDayCounter)

class SimpleDayCounter(DayCounter):
    __swig_setmethods__ = {}
    for _s in [DayCounter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimpleDayCounter, name, value)
    __swig_getmethods__ = {}
    for _s in [DayCounter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimpleDayCounter, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLibEx.new_SimpleDayCounter()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_SimpleDayCounter
    __del__ = lambda self: None
SimpleDayCounter_swigregister = _QuantLibEx.SimpleDayCounter_swigregister
SimpleDayCounter_swigregister(SimpleDayCounter)

class Business252(DayCounter):
    __swig_setmethods__ = {}
    for _s in [DayCounter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Business252, name, value)
    __swig_getmethods__ = {}
    for _s in [DayCounter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Business252, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLibEx.new_Business252(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_Business252
    __del__ = lambda self: None
Business252_swigregister = _QuantLibEx.Business252_swigregister
Business252_swigregister(Business252)


def Actual365NoLeap():
    return _QuantLibEx.Actual365NoLeap()
Actual365NoLeap = _QuantLibEx.Actual365NoLeap
Simple = _QuantLibEx.Simple
Compounded = _QuantLibEx.Compounded
Continuous = _QuantLibEx.Continuous
SimpleThenCompounded = _QuantLibEx.SimpleThenCompounded
CompoundedThenSimple = _QuantLibEx.CompoundedThenSimple
class InterestRate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InterestRate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InterestRate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLibEx.new_InterestRate(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def rate(self):
        return _QuantLibEx.InterestRate_rate(self)

    def dayCounter(self):
        return _QuantLibEx.InterestRate_dayCounter(self)

    def compounding(self):
        return _QuantLibEx.InterestRate_compounding(self)

    def frequency(self):
        return _QuantLibEx.InterestRate_frequency(self)

    def discountFactor(self, *args):
        return _QuantLibEx.InterestRate_discountFactor(self, *args)

    def compoundFactor(self, *args):
        return _QuantLibEx.InterestRate_compoundFactor(self, *args)
    if _newclass:
        impliedRate = staticmethod(_QuantLibEx.InterestRate_impliedRate)
    else:
        impliedRate = _QuantLibEx.InterestRate_impliedRate

    def equivalentRate(self, *args):
        return _QuantLibEx.InterestRate_equivalentRate(self, *args)

    def __str__(self):
        return _QuantLibEx.InterestRate___str__(self)
    __swig_destroy__ = _QuantLibEx.delete_InterestRate
    __del__ = lambda self: None
InterestRate_swigregister = _QuantLibEx.InterestRate_swigregister
InterestRate_swigregister(InterestRate)

def InterestRate_impliedRate(*args):
    return _QuantLibEx.InterestRate_impliedRate(*args)
InterestRate_impliedRate = _QuantLibEx.InterestRate_impliedRate

class InterestRateVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InterestRateVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InterestRateVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _QuantLibEx.InterestRateVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _QuantLibEx.InterestRateVector___nonzero__(self)

    def __bool__(self):
        return _QuantLibEx.InterestRateVector___bool__(self)

    def __len__(self):
        return _QuantLibEx.InterestRateVector___len__(self)

    def __getslice__(self, i, j):
        return _QuantLibEx.InterestRateVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _QuantLibEx.InterestRateVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _QuantLibEx.InterestRateVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _QuantLibEx.InterestRateVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _QuantLibEx.InterestRateVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _QuantLibEx.InterestRateVector___setitem__(self, *args)

    def pop(self):
        return _QuantLibEx.InterestRateVector_pop(self)

    def append(self, x):
        return _QuantLibEx.InterestRateVector_append(self, x)

    def empty(self):
        return _QuantLibEx.InterestRateVector_empty(self)

    def size(self):
        return _QuantLibEx.InterestRateVector_size(self)

    def swap(self, v):
        return _QuantLibEx.InterestRateVector_swap(self, v)

    def begin(self):
        return _QuantLibEx.InterestRateVector_begin(self)

    def end(self):
        return _QuantLibEx.InterestRateVector_end(self)

    def rbegin(self):
        return _QuantLibEx.InterestRateVector_rbegin(self)

    def rend(self):
        return _QuantLibEx.InterestRateVector_rend(self)

    def clear(self):
        return _QuantLibEx.InterestRateVector_clear(self)

    def get_allocator(self):
        return _QuantLibEx.InterestRateVector_get_allocator(self)

    def pop_back(self):
        return _QuantLibEx.InterestRateVector_pop_back(self)

    def erase(self, *args):
        return _QuantLibEx.InterestRateVector_erase(self, *args)

    def __init__(self, *args):
        this = _QuantLibEx.new_InterestRateVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _QuantLibEx.InterestRateVector_push_back(self, x)

    def front(self):
        return _QuantLibEx.InterestRateVector_front(self)

    def back(self):
        return _QuantLibEx.InterestRateVector_back(self)

    def assign(self, n, x):
        return _QuantLibEx.InterestRateVector_assign(self, n, x)

    def resize(self, *args):
        return _QuantLibEx.InterestRateVector_resize(self, *args)

    def insert(self, *args):
        return _QuantLibEx.InterestRateVector_insert(self, *args)

    def reserve(self, n):
        return _QuantLibEx.InterestRateVector_reserve(self, n)

    def capacity(self):
        return _QuantLibEx.InterestRateVector_capacity(self)
    __swig_destroy__ = _QuantLibEx.delete_InterestRateVector
    __del__ = lambda self: None
InterestRateVector_swigregister = _QuantLibEx.InterestRateVector_swigregister
InterestRateVector_swigregister(InterestRateVector)

class TermStructure(Observable):
    __swig_setmethods__ = {}
    for _s in [Observable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TermStructure, name, value)
    __swig_getmethods__ = {}
    for _s in [Observable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TermStructure, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def dayCounter(self):
        return _QuantLibEx.TermStructure_dayCounter(self)

    def timeFromReference(self, date):
        return _QuantLibEx.TermStructure_timeFromReference(self, date)

    def calendar(self):
        return _QuantLibEx.TermStructure_calendar(self)

    def referenceDate(self):
        return _QuantLibEx.TermStructure_referenceDate(self)

    def maxDate(self):
        return _QuantLibEx.TermStructure_maxDate(self)

    def maxTime(self):
        return _QuantLibEx.TermStructure_maxTime(self)

    def enableExtrapolation(self):
        return _QuantLibEx.TermStructure_enableExtrapolation(self)

    def disableExtrapolation(self):
        return _QuantLibEx.TermStructure_disableExtrapolation(self)

    def allowsExtrapolation(self):
        return _QuantLibEx.TermStructure_allowsExtrapolation(self)
    __swig_destroy__ = _QuantLibEx.delete_TermStructure
    __del__ = lambda self: None
TermStructure_swigregister = _QuantLibEx.TermStructure_swigregister
TermStructure_swigregister(TermStructure)

class YieldTermStructure(TermStructure):
    __swig_setmethods__ = {}
    for _s in [TermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, YieldTermStructure, name, value)
    __swig_getmethods__ = {}
    for _s in [TermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, YieldTermStructure, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def discount(self, *args):
        return _QuantLibEx.YieldTermStructure_discount(self, *args)

    def zeroRate(self, *args):
        return _QuantLibEx.YieldTermStructure_zeroRate(self, *args)

    def forwardRate(self, *args):
        return _QuantLibEx.YieldTermStructure_forwardRate(self, *args)
    __swig_destroy__ = _QuantLibEx.delete_YieldTermStructure
    __del__ = lambda self: None
YieldTermStructure_swigregister = _QuantLibEx.YieldTermStructure_swigregister
YieldTermStructure_swigregister(YieldTermStructure)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _QuantLibEx.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _QuantLibEx.IntVector___nonzero__(self)

    def __bool__(self):
        return _QuantLibEx.IntVector___bool__(self)

    def __len__(self):
        return _QuantLibEx.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _QuantLibEx.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _QuantLibEx.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _QuantLibEx.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _QuantLibEx.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _QuantLibEx.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _QuantLibEx.IntVector___setitem__(self, *args)

    def pop(self):
        return _QuantLibEx.IntVector_pop(self)

    def append(self, x):
        return _QuantLibEx.IntVector_append(self, x)

    def empty(self):
        return _QuantLibEx.IntVector_empty(self)

    def size(self):
        return _QuantLibEx.IntVector_size(self)

    def swap(self, v):
        return _QuantLibEx.IntVector_swap(self, v)

    def begin(self):
        return _QuantLibEx.IntVector_begin(self)

    def end(self):
        return _QuantLibEx.IntVector_end(self)

    def rbegin(self):
        return _QuantLibEx.IntVector_rbegin(self)

    def rend(self):
        return _QuantLibEx.IntVector_rend(self)

    def clear(self):
        return _QuantLibEx.IntVector_clear(self)

    def get_allocator(self):
        return _QuantLibEx.IntVector_get_allocator(self)

    def pop_back(self):
        return _QuantLibEx.IntVector_pop_back(self)

    def erase(self, *args):
        return _QuantLibEx.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _QuantLibEx.new_IntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _QuantLibEx.IntVector_push_back(self, x)

    def front(self):
        return _QuantLibEx.IntVector_front(self)

    def back(self):
        return _QuantLibEx.IntVector_back(self)

    def assign(self, n, x):
        return _QuantLibEx.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _QuantLibEx.IntVector_resize(self, *args)

    def insert(self, *args):
        return _QuantLibEx.IntVector_insert(self, *args)

    def reserve(self, n):
        return _QuantLibEx.IntVector_reserve(self, n)

    def capacity(self):
        return _QuantLibEx.IntVector_capacity(self)
    __swig_destroy__ = _QuantLibEx.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _QuantLibEx.IntVector_swigregister
IntVector_swigregister(IntVector)

class UnsignedIntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnsignedIntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnsignedIntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _QuantLibEx.UnsignedIntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _QuantLibEx.UnsignedIntVector___nonzero__(self)

    def __bool__(self):
        return _QuantLibEx.UnsignedIntVector___bool__(self)

    def __len__(self):
        return _QuantLibEx.UnsignedIntVector___len__(self)

    def __getslice__(self, i, j):
        return _QuantLibEx.UnsignedIntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _QuantLibEx.UnsignedIntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _QuantLibEx.UnsignedIntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _QuantLibEx.UnsignedIntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _QuantLibEx.UnsignedIntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _QuantLibEx.UnsignedIntVector___setitem__(self, *args)

    def pop(self):
        return _QuantLibEx.UnsignedIntVector_pop(self)

    def append(self, x):
        return _QuantLibEx.UnsignedIntVector_append(self, x)

    def empty(self):
        return _QuantLibEx.UnsignedIntVector_empty(self)

    def size(self):
        return _QuantLibEx.UnsignedIntVector_size(self)

    def swap(self, v):
        return _QuantLibEx.UnsignedIntVector_swap(self, v)

    def begin(self):
        return _QuantLibEx.UnsignedIntVector_begin(self)

    def end(self):
        return _QuantLibEx.UnsignedIntVector_end(self)

    def rbegin(self):
        return _QuantLibEx.UnsignedIntVector_rbegin(self)

    def rend(self):
        return _QuantLibEx.UnsignedIntVector_rend(self)

    def clear(self):
        return _QuantLibEx.UnsignedIntVector_clear(self)

    def get_allocator(self):
        return _QuantLibEx.UnsignedIntVector_get_allocator(self)

    def pop_back(self):
        return _QuantLibEx.UnsignedIntVector_pop_back(self)

    def erase(self, *args):
        return _QuantLibEx.UnsignedIntVector_erase(self, *args)

    def __init__(self, *args):
        this = _QuantLibEx.new_UnsignedIntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _QuantLibEx.UnsignedIntVector_push_back(self, x)

    def front(self):
        return _QuantLibEx.UnsignedIntVector_front(self)

    def back(self):
        return _QuantLibEx.UnsignedIntVector_back(self)

    def assign(self, n, x):
        return _QuantLibEx.UnsignedIntVector_assign(self, n, x)

    def resize(self, *args):
        return _QuantLibEx.UnsignedIntVector_resize(self, *args)

    def insert(self, *args):
        return _QuantLibEx.UnsignedIntVector_insert(self, *args)

    def reserve(self, n):
        return _QuantLibEx.UnsignedIntVector_reserve(self, n)

    def capacity(self):
        return _QuantLibEx.UnsignedIntVector_capacity(self)
    __swig_destroy__ = _QuantLibEx.delete_UnsignedIntVector
    __del__ = lambda self: None
UnsignedIntVector_swigregister = _QuantLibEx.UnsignedIntVector_swigregister
UnsignedIntVector_swigregister(UnsignedIntVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _QuantLibEx.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _QuantLibEx.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _QuantLibEx.DoubleVector___bool__(self)

    def __len__(self):
        return _QuantLibEx.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _QuantLibEx.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _QuantLibEx.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _QuantLibEx.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _QuantLibEx.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _QuantLibEx.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _QuantLibEx.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _QuantLibEx.DoubleVector_pop(self)

    def append(self, x):
        return _QuantLibEx.DoubleVector_append(self, x)

    def empty(self):
        return _QuantLibEx.DoubleVector_empty(self)

    def size(self):
        return _QuantLibEx.DoubleVector_size(self)

    def swap(self, v):
        return _QuantLibEx.DoubleVector_swap(self, v)

    def begin(self):
        return _QuantLibEx.DoubleVector_begin(self)

    def end(self):
        return _QuantLibEx.DoubleVector_end(self)

    def rbegin(self):
        return _QuantLibEx.DoubleVector_rbegin(self)

    def rend(self):
        return _QuantLibEx.DoubleVector_rend(self)

    def clear(self):
        return _QuantLibEx.DoubleVector_clear(self)

    def get_allocator(self):
        return _QuantLibEx.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _QuantLibEx.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _QuantLibEx.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _QuantLibEx.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _QuantLibEx.DoubleVector_push_back(self, x)

    def front(self):
        return _QuantLibEx.DoubleVector_front(self)

    def back(self):
        return _QuantLibEx.DoubleVector_back(self)

    def assign(self, n, x):
        return _QuantLibEx.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _QuantLibEx.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _QuantLibEx.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _QuantLibEx.DoubleVector_reserve(self, n)

    def capacity(self):
        return _QuantLibEx.DoubleVector_capacity(self)
    __swig_destroy__ = _QuantLibEx.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _QuantLibEx.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class StrVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StrVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _QuantLibEx.StrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _QuantLibEx.StrVector___nonzero__(self)

    def __bool__(self):
        return _QuantLibEx.StrVector___bool__(self)

    def __len__(self):
        return _QuantLibEx.StrVector___len__(self)

    def __getslice__(self, i, j):
        return _QuantLibEx.StrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _QuantLibEx.StrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _QuantLibEx.StrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _QuantLibEx.StrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _QuantLibEx.StrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _QuantLibEx.StrVector___setitem__(self, *args)

    def pop(self):
        return _QuantLibEx.StrVector_pop(self)

    def append(self, x):
        return _QuantLibEx.StrVector_append(self, x)

    def empty(self):
        return _QuantLibEx.StrVector_empty(self)

    def size(self):
        return _QuantLibEx.StrVector_size(self)

    def swap(self, v):
        return _QuantLibEx.StrVector_swap(self, v)

    def begin(self):
        return _QuantLibEx.StrVector_begin(self)

    def end(self):
        return _QuantLibEx.StrVector_end(self)

    def rbegin(self):
        return _QuantLibEx.StrVector_rbegin(self)

    def rend(self):
        return _QuantLibEx.StrVector_rend(self)

    def clear(self):
        return _QuantLibEx.StrVector_clear(self)

    def get_allocator(self):
        return _QuantLibEx.StrVector_get_allocator(self)

    def pop_back(self):
        return _QuantLibEx.StrVector_pop_back(self)

    def erase(self, *args):
        return _QuantLibEx.StrVector_erase(self, *args)

    def __init__(self, *args):
        this = _QuantLibEx.new_StrVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _QuantLibEx.StrVector_push_back(self, x)

    def front(self):
        return _QuantLibEx.StrVector_front(self)

    def back(self):
        return _QuantLibEx.StrVector_back(self)

    def assign(self, n, x):
        return _QuantLibEx.StrVector_assign(self, n, x)

    def resize(self, *args):
        return _QuantLibEx.StrVector_resize(self, *args)

    def insert(self, *args):
        return _QuantLibEx.StrVector_insert(self, *args)

    def reserve(self, n):
        return _QuantLibEx.StrVector_reserve(self, n)

    def capacity(self):
        return _QuantLibEx.StrVector_capacity(self)
    __swig_destroy__ = _QuantLibEx.delete_StrVector
    __del__ = lambda self: None
StrVector_swigregister = _QuantLibEx.StrVector_swigregister
StrVector_swigregister(StrVector)

class BoolVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoolVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoolVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _QuantLibEx.BoolVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _QuantLibEx.BoolVector___nonzero__(self)

    def __bool__(self):
        return _QuantLibEx.BoolVector___bool__(self)

    def __len__(self):
        return _QuantLibEx.BoolVector___len__(self)

    def __getslice__(self, i, j):
        return _QuantLibEx.BoolVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _QuantLibEx.BoolVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _QuantLibEx.BoolVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _QuantLibEx.BoolVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _QuantLibEx.BoolVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _QuantLibEx.BoolVector___setitem__(self, *args)

    def pop(self):
        return _QuantLibEx.BoolVector_pop(self)

    def append(self, x):
        return _QuantLibEx.BoolVector_append(self, x)

    def empty(self):
        return _QuantLibEx.BoolVector_empty(self)

    def size(self):
        return _QuantLibEx.BoolVector_size(self)

    def swap(self, v):
        return _QuantLibEx.BoolVector_swap(self, v)

    def begin(self):
        return _QuantLibEx.BoolVector_begin(self)

    def end(self):
        return _QuantLibEx.BoolVector_end(self)

    def rbegin(self):
        return _QuantLibEx.BoolVector_rbegin(self)

    def rend(self):
        return _QuantLibEx.BoolVector_rend(self)

    def clear(self):
        return _QuantLibEx.BoolVector_clear(self)

    def get_allocator(self):
        return _QuantLibEx.BoolVector_get_allocator(self)

    def pop_back(self):
        return _QuantLibEx.BoolVector_pop_back(self)

    def erase(self, *args):
        return _QuantLibEx.BoolVector_erase(self, *args)

    def __init__(self, *args):
        this = _QuantLibEx.new_BoolVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _QuantLibEx.BoolVector_push_back(self, x)

    def front(self):
        return _QuantLibEx.BoolVector_front(self)

    def back(self):
        return _QuantLibEx.BoolVector_back(self)

    def assign(self, n, x):
        return _QuantLibEx.BoolVector_assign(self, n, x)

    def resize(self, *args):
        return _QuantLibEx.BoolVector_resize(self, *args)

    def insert(self, *args):
        return _QuantLibEx.BoolVector_insert(self, *args)

    def reserve(self, n):
        return _QuantLibEx.BoolVector_reserve(self, n)

    def capacity(self):
        return _QuantLibEx.BoolVector_capacity(self)
    __swig_destroy__ = _QuantLibEx.delete_BoolVector
    __del__ = lambda self: None
BoolVector_swigregister = _QuantLibEx.BoolVector_swigregister
BoolVector_swigregister(BoolVector)

class DoublePair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoublePair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoublePair, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLibEx.new_DoublePair(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _QuantLibEx.DoublePair_first_set
    __swig_getmethods__["first"] = _QuantLibEx.DoublePair_first_get
    if _newclass:
        first = _swig_property(_QuantLibEx.DoublePair_first_get, _QuantLibEx.DoublePair_first_set)
    __swig_setmethods__["second"] = _QuantLibEx.DoublePair_second_set
    __swig_getmethods__["second"] = _QuantLibEx.DoublePair_second_get
    if _newclass:
        second = _swig_property(_QuantLibEx.DoublePair_second_get, _QuantLibEx.DoublePair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _QuantLibEx.delete_DoublePair
    __del__ = lambda self: None
DoublePair_swigregister = _QuantLibEx.DoublePair_swigregister
DoublePair_swigregister(DoublePair)

class DoublePairVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoublePairVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoublePairVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _QuantLibEx.DoublePairVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _QuantLibEx.DoublePairVector___nonzero__(self)

    def __bool__(self):
        return _QuantLibEx.DoublePairVector___bool__(self)

    def __len__(self):
        return _QuantLibEx.DoublePairVector___len__(self)

    def __getslice__(self, i, j):
        return _QuantLibEx.DoublePairVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _QuantLibEx.DoublePairVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _QuantLibEx.DoublePairVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _QuantLibEx.DoublePairVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _QuantLibEx.DoublePairVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _QuantLibEx.DoublePairVector___setitem__(self, *args)

    def pop(self):
        return _QuantLibEx.DoublePairVector_pop(self)

    def append(self, x):
        return _QuantLibEx.DoublePairVector_append(self, x)

    def empty(self):
        return _QuantLibEx.DoublePairVector_empty(self)

    def size(self):
        return _QuantLibEx.DoublePairVector_size(self)

    def swap(self, v):
        return _QuantLibEx.DoublePairVector_swap(self, v)

    def begin(self):
        return _QuantLibEx.DoublePairVector_begin(self)

    def end(self):
        return _QuantLibEx.DoublePairVector_end(self)

    def rbegin(self):
        return _QuantLibEx.DoublePairVector_rbegin(self)

    def rend(self):
        return _QuantLibEx.DoublePairVector_rend(self)

    def clear(self):
        return _QuantLibEx.DoublePairVector_clear(self)

    def get_allocator(self):
        return _QuantLibEx.DoublePairVector_get_allocator(self)

    def pop_back(self):
        return _QuantLibEx.DoublePairVector_pop_back(self)

    def erase(self, *args):
        return _QuantLibEx.DoublePairVector_erase(self, *args)

    def __init__(self, *args):
        this = _QuantLibEx.new_DoublePairVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _QuantLibEx.DoublePairVector_push_back(self, x)

    def front(self):
        return _QuantLibEx.DoublePairVector_front(self)

    def back(self):
        return _QuantLibEx.DoublePairVector_back(self)

    def assign(self, n, x):
        return _QuantLibEx.DoublePairVector_assign(self, n, x)

    def resize(self, *args):
        return _QuantLibEx.DoublePairVector_resize(self, *args)

    def insert(self, *args):
        return _QuantLibEx.DoublePairVector_insert(self, *args)

    def reserve(self, n):
        return _QuantLibEx.DoublePairVector_reserve(self, n)

    def capacity(self):
        return _QuantLibEx.DoublePairVector_capacity(self)
    __swig_destroy__ = _QuantLibEx.delete_DoublePairVector
    __del__ = lambda self: None
DoublePairVector_swigregister = _QuantLibEx.DoublePairVector_swigregister
DoublePairVector_swigregister(DoublePairVector)

class CashFlow(Observable):
    __swig_setmethods__ = {}
    for _s in [Observable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CashFlow, name, value)
    __swig_getmethods__ = {}
    for _s in [Observable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CashFlow, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def amount(self):
        return _QuantLibEx.CashFlow_amount(self)

    def date(self):
        return _QuantLibEx.CashFlow_date(self)
    __swig_destroy__ = _QuantLibEx.delete_CashFlow
    __del__ = lambda self: None
CashFlow_swigregister = _QuantLibEx.CashFlow_swigregister
CashFlow_swigregister(CashFlow)

class Leg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Leg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Leg, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _QuantLibEx.Leg_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _QuantLibEx.Leg___nonzero__(self)

    def __bool__(self):
        return _QuantLibEx.Leg___bool__(self)

    def __len__(self):
        return _QuantLibEx.Leg___len__(self)

    def __getslice__(self, i, j):
        return _QuantLibEx.Leg___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _QuantLibEx.Leg___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _QuantLibEx.Leg___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _QuantLibEx.Leg___delitem__(self, *args)

    def __getitem__(self, *args):
        return _QuantLibEx.Leg___getitem__(self, *args)

    def __setitem__(self, *args):
        return _QuantLibEx.Leg___setitem__(self, *args)

    def pop(self):
        return _QuantLibEx.Leg_pop(self)

    def append(self, x):
        return _QuantLibEx.Leg_append(self, x)

    def empty(self):
        return _QuantLibEx.Leg_empty(self)

    def size(self):
        return _QuantLibEx.Leg_size(self)

    def swap(self, v):
        return _QuantLibEx.Leg_swap(self, v)

    def begin(self):
        return _QuantLibEx.Leg_begin(self)

    def end(self):
        return _QuantLibEx.Leg_end(self)

    def rbegin(self):
        return _QuantLibEx.Leg_rbegin(self)

    def rend(self):
        return _QuantLibEx.Leg_rend(self)

    def clear(self):
        return _QuantLibEx.Leg_clear(self)

    def get_allocator(self):
        return _QuantLibEx.Leg_get_allocator(self)

    def pop_back(self):
        return _QuantLibEx.Leg_pop_back(self)

    def erase(self, *args):
        return _QuantLibEx.Leg_erase(self, *args)

    def __init__(self, *args):
        this = _QuantLibEx.new_Leg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _QuantLibEx.Leg_push_back(self, x)

    def front(self):
        return _QuantLibEx.Leg_front(self)

    def back(self):
        return _QuantLibEx.Leg_back(self)

    def assign(self, n, x):
        return _QuantLibEx.Leg_assign(self, n, x)

    def resize(self, *args):
        return _QuantLibEx.Leg_resize(self, *args)

    def insert(self, *args):
        return _QuantLibEx.Leg_insert(self, *args)

    def reserve(self, n):
        return _QuantLibEx.Leg_reserve(self, n)

    def capacity(self):
        return _QuantLibEx.Leg_capacity(self)
    __swig_destroy__ = _QuantLibEx.delete_Leg
    __del__ = lambda self: None
Leg_swigregister = _QuantLibEx.Leg_swigregister
Leg_swigregister(Leg)

class Coupon(CashFlow):
    __swig_setmethods__ = {}
    for _s in [CashFlow]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Coupon, name, value)
    __swig_getmethods__ = {}
    for _s in [CashFlow]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Coupon, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def nominal(self):
        return _QuantLibEx.Coupon_nominal(self)

    def accrualStartDate(self):
        return _QuantLibEx.Coupon_accrualStartDate(self)

    def accrualEndDate(self):
        return _QuantLibEx.Coupon_accrualEndDate(self)

    def referencePeriodStart(self):
        return _QuantLibEx.Coupon_referencePeriodStart(self)

    def referencePeriodEnd(self):
        return _QuantLibEx.Coupon_referencePeriodEnd(self)

    def exCouponDate(self):
        return _QuantLibEx.Coupon_exCouponDate(self)

    def rate(self):
        return _QuantLibEx.Coupon_rate(self)

    def accrualPeriod(self):
        return _QuantLibEx.Coupon_accrualPeriod(self)

    def accrualDays(self):
        return _QuantLibEx.Coupon_accrualDays(self)

    def dayCounter(self):
        return _QuantLibEx.Coupon_dayCounter(self)

    def accruedAmount(self, date):
        return _QuantLibEx.Coupon_accruedAmount(self, date)
    __swig_destroy__ = _QuantLibEx.delete_Coupon
    __del__ = lambda self: None
Coupon_swigregister = _QuantLibEx.Coupon_swigregister
Coupon_swigregister(Coupon)


def as_coupon(cf):
    return _QuantLibEx.as_coupon(cf)
as_coupon = _QuantLibEx.as_coupon
class FixedRateCoupon(Coupon):
    __swig_setmethods__ = {}
    for _s in [Coupon]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FixedRateCoupon, name, value)
    __swig_getmethods__ = {}
    for _s in [Coupon]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FixedRateCoupon, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLibEx.new_FixedRateCoupon(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def interestRate(self):
        return _QuantLibEx.FixedRateCoupon_interestRate(self)
    __swig_destroy__ = _QuantLibEx.delete_FixedRateCoupon
    __del__ = lambda self: None
FixedRateCoupon_swigregister = _QuantLibEx.FixedRateCoupon_swigregister
FixedRateCoupon_swigregister(FixedRateCoupon)


def as_fixed_rate_coupon(cf):
    return _QuantLibEx.as_fixed_rate_coupon(cf)
as_fixed_rate_coupon = _QuantLibEx.as_fixed_rate_coupon

def FixedRateLeg(*args):
    return _QuantLibEx.FixedRateLeg(*args)
FixedRateLeg = _QuantLibEx.FixedRateLeg
class Duration(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Duration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Duration, name)
    __repr__ = _swig_repr
    Simple = _QuantLibEx.Duration_Simple
    Macaulay = _QuantLibEx.Duration_Macaulay
    Modified = _QuantLibEx.Duration_Modified

    def __init__(self):
        this = _QuantLibEx.new_Duration()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_Duration
    __del__ = lambda self: None
Duration_swigregister = _QuantLibEx.Duration_swigregister
Duration_swigregister(Duration)

class CashFlows(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CashFlows, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CashFlows, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        startDate = staticmethod(_QuantLibEx.CashFlows_startDate)
    else:
        startDate = _QuantLibEx.CashFlows_startDate
    if _newclass:
        maturityDate = staticmethod(_QuantLibEx.CashFlows_maturityDate)
    else:
        maturityDate = _QuantLibEx.CashFlows_maturityDate
    if _newclass:
        previousCashFlowDate = staticmethod(_QuantLibEx.CashFlows_previousCashFlowDate)
    else:
        previousCashFlowDate = _QuantLibEx.CashFlows_previousCashFlowDate
    if _newclass:
        nextCashFlowDate = staticmethod(_QuantLibEx.CashFlows_nextCashFlowDate)
    else:
        nextCashFlowDate = _QuantLibEx.CashFlows_nextCashFlowDate
    if _newclass:
        npv = staticmethod(_QuantLibEx.CashFlows_npv)
    else:
        npv = _QuantLibEx.CashFlows_npv
    if _newclass:
        bps = staticmethod(_QuantLibEx.CashFlows_bps)
    else:
        bps = _QuantLibEx.CashFlows_bps
    if _newclass:
        atmRate = staticmethod(_QuantLibEx.CashFlows_atmRate)
    else:
        atmRate = _QuantLibEx.CashFlows_atmRate
    if _newclass:
        yieldRate = staticmethod(_QuantLibEx.CashFlows_yieldRate)
    else:
        yieldRate = _QuantLibEx.CashFlows_yieldRate
    if _newclass:
        duration = staticmethod(_QuantLibEx.CashFlows_duration)
    else:
        duration = _QuantLibEx.CashFlows_duration
    if _newclass:
        convexity = staticmethod(_QuantLibEx.CashFlows_convexity)
    else:
        convexity = _QuantLibEx.CashFlows_convexity
    if _newclass:
        basisPointValue = staticmethod(_QuantLibEx.CashFlows_basisPointValue)
    else:
        basisPointValue = _QuantLibEx.CashFlows_basisPointValue
    if _newclass:
        zSpread = staticmethod(_QuantLibEx.CashFlows_zSpread)
    else:
        zSpread = _QuantLibEx.CashFlows_zSpread
    __swig_destroy__ = _QuantLibEx.delete_CashFlows
    __del__ = lambda self: None
CashFlows_swigregister = _QuantLibEx.CashFlows_swigregister
CashFlows_swigregister(CashFlows)

def CashFlows_startDate(arg2):
    return _QuantLibEx.CashFlows_startDate(arg2)
CashFlows_startDate = _QuantLibEx.CashFlows_startDate

def CashFlows_maturityDate(arg2):
    return _QuantLibEx.CashFlows_maturityDate(arg2)
CashFlows_maturityDate = _QuantLibEx.CashFlows_maturityDate

def CashFlows_previousCashFlowDate(*args):
    return _QuantLibEx.CashFlows_previousCashFlowDate(*args)
CashFlows_previousCashFlowDate = _QuantLibEx.CashFlows_previousCashFlowDate

def CashFlows_nextCashFlowDate(*args):
    return _QuantLibEx.CashFlows_nextCashFlowDate(*args)
CashFlows_nextCashFlowDate = _QuantLibEx.CashFlows_nextCashFlowDate

def CashFlows_npv(*args):
    return _QuantLibEx.CashFlows_npv(*args)
CashFlows_npv = _QuantLibEx.CashFlows_npv

def CashFlows_bps(*args):
    return _QuantLibEx.CashFlows_bps(*args)
CashFlows_bps = _QuantLibEx.CashFlows_bps

def CashFlows_atmRate(*args):
    return _QuantLibEx.CashFlows_atmRate(*args)
CashFlows_atmRate = _QuantLibEx.CashFlows_atmRate

def CashFlows_yieldRate(*args):
    return _QuantLibEx.CashFlows_yieldRate(*args)
CashFlows_yieldRate = _QuantLibEx.CashFlows_yieldRate

def CashFlows_duration(*args):
    return _QuantLibEx.CashFlows_duration(*args)
CashFlows_duration = _QuantLibEx.CashFlows_duration

def CashFlows_convexity(*args):
    return _QuantLibEx.CashFlows_convexity(*args)
CashFlows_convexity = _QuantLibEx.CashFlows_convexity

def CashFlows_basisPointValue(*args):
    return _QuantLibEx.CashFlows_basisPointValue(*args)
CashFlows_basisPointValue = _QuantLibEx.CashFlows_basisPointValue

def CashFlows_zSpread(*args):
    return _QuantLibEx.CashFlows_zSpread(*args)
CashFlows_zSpread = _QuantLibEx.CashFlows_zSpread

class Bond(Instrument):
    __swig_setmethods__ = {}
    for _s in [Instrument]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bond, name, value)
    __swig_getmethods__ = {}
    for _s in [Instrument]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Bond, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLibEx.new_Bond(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def nextCouponRate(self, *args):
        return _QuantLibEx.Bond_nextCouponRate(self, *args)

    def previousCouponRate(self, *args):
        return _QuantLibEx.Bond_previousCouponRate(self, *args)

    def settlementDays(self):
        return _QuantLibEx.Bond_settlementDays(self)

    def settlementDate(self, *args):
        return _QuantLibEx.Bond_settlementDate(self, *args)

    def startDate(self):
        return _QuantLibEx.Bond_startDate(self)

    def maturityDate(self):
        return _QuantLibEx.Bond_maturityDate(self)

    def issueDate(self):
        return _QuantLibEx.Bond_issueDate(self)

    def cashflows(self):
        return _QuantLibEx.Bond_cashflows(self)

    def redemptions(self):
        return _QuantLibEx.Bond_redemptions(self)

    def redemption(self):
        return _QuantLibEx.Bond_redemption(self)

    def calendar(self):
        return _QuantLibEx.Bond_calendar(self)

    def notionals(self):
        return _QuantLibEx.Bond_notionals(self)

    def notional(self, *args):
        return _QuantLibEx.Bond_notional(self, *args)

    def cleanPrice(self, *args):
        return _QuantLibEx.Bond_cleanPrice(self, *args)

    def dirtyPrice(self, *args):
        return _QuantLibEx.Bond_dirtyPrice(self, *args)

    def bondYield(self, *args):
        return _QuantLibEx.Bond_bondYield(self, *args)

    def accruedAmount(self, *args):
        return _QuantLibEx.Bond_accruedAmount(self, *args)

    def settlementValue(self, *args):
        return _QuantLibEx.Bond_settlementValue(self, *args)
    __swig_destroy__ = _QuantLibEx.delete_Bond
    __del__ = lambda self: None
Bond_swigregister = _QuantLibEx.Bond_swigregister
Bond_swigregister(Bond)

class FixedRateBond(Bond):
    __swig_setmethods__ = {}
    for _s in [Bond]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FixedRateBond, name, value)
    __swig_getmethods__ = {}
    for _s in [Bond]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FixedRateBond, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLibEx.new_FixedRateBond(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        from_rates = staticmethod(_QuantLibEx.FixedRateBond_from_rates)
    else:
        from_rates = _QuantLibEx.FixedRateBond_from_rates
    if _newclass:
        from_interest_rates = staticmethod(_QuantLibEx.FixedRateBond_from_interest_rates)
    else:
        from_interest_rates = _QuantLibEx.FixedRateBond_from_interest_rates
    if _newclass:
        from_date_info = staticmethod(_QuantLibEx.FixedRateBond_from_date_info)
    else:
        from_date_info = _QuantLibEx.FixedRateBond_from_date_info

    def frequency(self):
        return _QuantLibEx.FixedRateBond_frequency(self)

    def dayCounter(self):
        return _QuantLibEx.FixedRateBond_dayCounter(self)
    __swig_destroy__ = _QuantLibEx.delete_FixedRateBond
    __del__ = lambda self: None
FixedRateBond_swigregister = _QuantLibEx.FixedRateBond_swigregister
FixedRateBond_swigregister(FixedRateBond)

def FixedRateBond_from_rates(*args):
    return _QuantLibEx.FixedRateBond_from_rates(*args)
FixedRateBond_from_rates = _QuantLibEx.FixedRateBond_from_rates

def FixedRateBond_from_interest_rates(*args):
    return _QuantLibEx.FixedRateBond_from_interest_rates(*args)
FixedRateBond_from_interest_rates = _QuantLibEx.FixedRateBond_from_interest_rates

def FixedRateBond_from_date_info(*args):
    return _QuantLibEx.FixedRateBond_from_date_info(*args)
FixedRateBond_from_date_info = _QuantLibEx.FixedRateBond_from_date_info

class OptimizationMethod(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptimizationMethod, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptimizationMethod, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _QuantLibEx.delete_OptimizationMethod
    __del__ = lambda self: None
OptimizationMethod_swigregister = _QuantLibEx.OptimizationMethod_swigregister
OptimizationMethod_swigregister(OptimizationMethod)

class ConjugateGradient(OptimizationMethod):
    __swig_setmethods__ = {}
    for _s in [OptimizationMethod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConjugateGradient, name, value)
    __swig_getmethods__ = {}
    for _s in [OptimizationMethod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConjugateGradient, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLibEx.new_ConjugateGradient()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_ConjugateGradient
    __del__ = lambda self: None
ConjugateGradient_swigregister = _QuantLibEx.ConjugateGradient_swigregister
ConjugateGradient_swigregister(ConjugateGradient)

class Simplex(OptimizationMethod):
    __swig_setmethods__ = {}
    for _s in [OptimizationMethod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Simplex, name, value)
    __swig_getmethods__ = {}
    for _s in [OptimizationMethod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Simplex, name)
    __repr__ = _swig_repr

    def __init__(self, arg2):
        this = _QuantLibEx.new_Simplex(arg2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_Simplex
    __del__ = lambda self: None
Simplex_swigregister = _QuantLibEx.Simplex_swigregister
Simplex_swigregister(Simplex)

class SteepestDescent(OptimizationMethod):
    __swig_setmethods__ = {}
    for _s in [OptimizationMethod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SteepestDescent, name, value)
    __swig_getmethods__ = {}
    for _s in [OptimizationMethod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SteepestDescent, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLibEx.new_SteepestDescent()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_SteepestDescent
    __del__ = lambda self: None
SteepestDescent_swigregister = _QuantLibEx.SteepestDescent_swigregister
SteepestDescent_swigregister(SteepestDescent)

class BFGS(OptimizationMethod):
    __swig_setmethods__ = {}
    for _s in [OptimizationMethod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BFGS, name, value)
    __swig_getmethods__ = {}
    for _s in [OptimizationMethod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BFGS, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLibEx.new_BFGS()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_BFGS
    __del__ = lambda self: None
BFGS_swigregister = _QuantLibEx.BFGS_swigregister
BFGS_swigregister(BFGS)

class LevenbergMarquardt(OptimizationMethod):
    __swig_setmethods__ = {}
    for _s in [OptimizationMethod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LevenbergMarquardt, name, value)
    __swig_getmethods__ = {}
    for _s in [OptimizationMethod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LevenbergMarquardt, name)
    __repr__ = _swig_repr

    def __init__(self, epsfcn=1.0e-8, xtol=1.0e-8, gtol=1.0e-8, useCostFunctionsJacobian=False):
        this = _QuantLibEx.new_LevenbergMarquardt(epsfcn, xtol, gtol, useCostFunctionsJacobian)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_LevenbergMarquardt
    __del__ = lambda self: None
LevenbergMarquardt_swigregister = _QuantLibEx.LevenbergMarquardt_swigregister
LevenbergMarquardt_swigregister(LevenbergMarquardt)

class DifferentialEvolution(OptimizationMethod):
    __swig_setmethods__ = {}
    for _s in [OptimizationMethod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DifferentialEvolution, name, value)
    __swig_getmethods__ = {}
    for _s in [OptimizationMethod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DifferentialEvolution, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLibEx.new_DifferentialEvolution()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_DifferentialEvolution
    __del__ = lambda self: None
DifferentialEvolution_swigregister = _QuantLibEx.DifferentialEvolution_swigregister
DifferentialEvolution_swigregister(DifferentialEvolution)

class SamplerGaussian(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SamplerGaussian, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SamplerGaussian, name)
    __repr__ = _swig_repr

    def __init__(self, seed=0):
        this = _QuantLibEx.new_SamplerGaussian(seed)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_SamplerGaussian
    __del__ = lambda self: None
SamplerGaussian_swigregister = _QuantLibEx.SamplerGaussian_swigregister
SamplerGaussian_swigregister(SamplerGaussian)

class SamplerLogNormal(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SamplerLogNormal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SamplerLogNormal, name)
    __repr__ = _swig_repr

    def __init__(self, seed=0):
        this = _QuantLibEx.new_SamplerLogNormal(seed)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_SamplerLogNormal
    __del__ = lambda self: None
SamplerLogNormal_swigregister = _QuantLibEx.SamplerLogNormal_swigregister
SamplerLogNormal_swigregister(SamplerLogNormal)

class SamplerMirrorGaussian(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SamplerMirrorGaussian, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SamplerMirrorGaussian, name)
    __repr__ = _swig_repr

    def __init__(self, lower, upper, seed=0):
        this = _QuantLibEx.new_SamplerMirrorGaussian(lower, upper, seed)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_SamplerMirrorGaussian
    __del__ = lambda self: None
SamplerMirrorGaussian_swigregister = _QuantLibEx.SamplerMirrorGaussian_swigregister
SamplerMirrorGaussian_swigregister(SamplerMirrorGaussian)

class ProbabilityBoltzmannDownhill(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProbabilityBoltzmannDownhill, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ProbabilityBoltzmannDownhill, name)
    __repr__ = _swig_repr

    def __init__(self, seed=0):
        this = _QuantLibEx.new_ProbabilityBoltzmannDownhill(seed)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_ProbabilityBoltzmannDownhill
    __del__ = lambda self: None
ProbabilityBoltzmannDownhill_swigregister = _QuantLibEx.ProbabilityBoltzmannDownhill_swigregister
ProbabilityBoltzmannDownhill_swigregister(ProbabilityBoltzmannDownhill)

class TemperatureExponential(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TemperatureExponential, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TemperatureExponential, name)
    __repr__ = _swig_repr

    def __init__(self, initialTemp, dimension, power=0.95):
        this = _QuantLibEx.new_TemperatureExponential(initialTemp, dimension, power)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_TemperatureExponential
    __del__ = lambda self: None
TemperatureExponential_swigregister = _QuantLibEx.TemperatureExponential_swigregister
TemperatureExponential_swigregister(TemperatureExponential)

class ReannealingTrivial(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReannealingTrivial, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReannealingTrivial, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLibEx.new_ReannealingTrivial()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_ReannealingTrivial
    __del__ = lambda self: None
ReannealingTrivial_swigregister = _QuantLibEx.ReannealingTrivial_swigregister
ReannealingTrivial_swigregister(ReannealingTrivial)

class GaussianSimulatedAnnealing(OptimizationMethod):
    __swig_setmethods__ = {}
    for _s in [OptimizationMethod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GaussianSimulatedAnnealing, name, value)
    __swig_getmethods__ = {}
    for _s in [OptimizationMethod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GaussianSimulatedAnnealing, name)
    __repr__ = _swig_repr
    NoResetScheme = _QuantLibEx.GaussianSimulatedAnnealing_NoResetScheme
    ResetToBestPoint = _QuantLibEx.GaussianSimulatedAnnealing_ResetToBestPoint
    ResetToOrigin = _QuantLibEx.GaussianSimulatedAnnealing_ResetToOrigin

    def __init__(self, *args):
        this = _QuantLibEx.new_GaussianSimulatedAnnealing(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_GaussianSimulatedAnnealing
    __del__ = lambda self: None
GaussianSimulatedAnnealing_swigregister = _QuantLibEx.GaussianSimulatedAnnealing_swigregister
GaussianSimulatedAnnealing_swigregister(GaussianSimulatedAnnealing)

class MirrorGaussianSimulatedAnnealing(OptimizationMethod):
    __swig_setmethods__ = {}
    for _s in [OptimizationMethod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MirrorGaussianSimulatedAnnealing, name, value)
    __swig_getmethods__ = {}
    for _s in [OptimizationMethod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MirrorGaussianSimulatedAnnealing, name)
    __repr__ = _swig_repr
    NoResetScheme = _QuantLibEx.MirrorGaussianSimulatedAnnealing_NoResetScheme
    ResetToBestPoint = _QuantLibEx.MirrorGaussianSimulatedAnnealing_ResetToBestPoint
    ResetToOrigin = _QuantLibEx.MirrorGaussianSimulatedAnnealing_ResetToOrigin

    def __init__(self, *args):
        this = _QuantLibEx.new_MirrorGaussianSimulatedAnnealing(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_MirrorGaussianSimulatedAnnealing
    __del__ = lambda self: None
MirrorGaussianSimulatedAnnealing_swigregister = _QuantLibEx.MirrorGaussianSimulatedAnnealing_swigregister
MirrorGaussianSimulatedAnnealing_swigregister(MirrorGaussianSimulatedAnnealing)

class LogNormalSimulatedAnnealing(OptimizationMethod):
    __swig_setmethods__ = {}
    for _s in [OptimizationMethod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogNormalSimulatedAnnealing, name, value)
    __swig_getmethods__ = {}
    for _s in [OptimizationMethod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LogNormalSimulatedAnnealing, name)
    __repr__ = _swig_repr
    NoResetScheme = _QuantLibEx.LogNormalSimulatedAnnealing_NoResetScheme
    ResetToBestPoint = _QuantLibEx.LogNormalSimulatedAnnealing_ResetToBestPoint
    ResetToOrigin = _QuantLibEx.LogNormalSimulatedAnnealing_ResetToOrigin

    def __init__(self, *args):
        this = _QuantLibEx.new_LogNormalSimulatedAnnealing(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_LogNormalSimulatedAnnealing
    __del__ = lambda self: None
LogNormalSimulatedAnnealing_swigregister = _QuantLibEx.LogNormalSimulatedAnnealing_swigregister
LogNormalSimulatedAnnealing_swigregister(LogNormalSimulatedAnnealing)

class RateHelper(Observable):
    __swig_setmethods__ = {}
    for _s in [Observable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RateHelper, name, value)
    __swig_getmethods__ = {}
    for _s in [Observable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RateHelper, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def quote(self):
        return _QuantLibEx.RateHelper_quote(self)

    def latestDate(self):
        return _QuantLibEx.RateHelper_latestDate(self)

    def earliestDate(self):
        return _QuantLibEx.RateHelper_earliestDate(self)

    def maturityDate(self):
        return _QuantLibEx.RateHelper_maturityDate(self)

    def latestRelevantDate(self):
        return _QuantLibEx.RateHelper_latestRelevantDate(self)

    def pillarDate(self):
        return _QuantLibEx.RateHelper_pillarDate(self)

    def impliedQuote(self):
        return _QuantLibEx.RateHelper_impliedQuote(self)

    def quoteError(self):
        return _QuantLibEx.RateHelper_quoteError(self)
    __swig_destroy__ = _QuantLibEx.delete_RateHelper
    __del__ = lambda self: None
RateHelper_swigregister = _QuantLibEx.RateHelper_swigregister
RateHelper_swigregister(RateHelper)

class BondHelper(RateHelper):
    __swig_setmethods__ = {}
    for _s in [RateHelper]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BondHelper, name, value)
    __swig_getmethods__ = {}
    for _s in [RateHelper]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BondHelper, name)
    __repr__ = _swig_repr

    def __init__(self, cleanPrice, bond, useCleanPrice=True):
        this = _QuantLibEx.new_BondHelper(cleanPrice, bond, useCleanPrice)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def bond(self):
        return _QuantLibEx.BondHelper_bond(self)
    __swig_destroy__ = _QuantLibEx.delete_BondHelper
    __del__ = lambda self: None
BondHelper_swigregister = _QuantLibEx.BondHelper_swigregister
BondHelper_swigregister(BondHelper)

class FixedRateBondHelper(BondHelper):
    __swig_setmethods__ = {}
    for _s in [BondHelper]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FixedRateBondHelper, name, value)
    __swig_getmethods__ = {}
    for _s in [BondHelper]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FixedRateBondHelper, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLibEx.new_FixedRateBondHelper(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def fixedRateBond(self):
        return _QuantLibEx.FixedRateBondHelper_fixedRateBond(self)
    __swig_destroy__ = _QuantLibEx.delete_FixedRateBondHelper
    __del__ = lambda self: None
FixedRateBondHelper_swigregister = _QuantLibEx.FixedRateBondHelper_swigregister
FixedRateBondHelper_swigregister(FixedRateBondHelper)

class RateHelperVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RateHelperVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RateHelperVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _QuantLibEx.RateHelperVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _QuantLibEx.RateHelperVector___nonzero__(self)

    def __bool__(self):
        return _QuantLibEx.RateHelperVector___bool__(self)

    def __len__(self):
        return _QuantLibEx.RateHelperVector___len__(self)

    def __getslice__(self, i, j):
        return _QuantLibEx.RateHelperVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _QuantLibEx.RateHelperVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _QuantLibEx.RateHelperVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _QuantLibEx.RateHelperVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _QuantLibEx.RateHelperVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _QuantLibEx.RateHelperVector___setitem__(self, *args)

    def pop(self):
        return _QuantLibEx.RateHelperVector_pop(self)

    def append(self, x):
        return _QuantLibEx.RateHelperVector_append(self, x)

    def empty(self):
        return _QuantLibEx.RateHelperVector_empty(self)

    def size(self):
        return _QuantLibEx.RateHelperVector_size(self)

    def swap(self, v):
        return _QuantLibEx.RateHelperVector_swap(self, v)

    def begin(self):
        return _QuantLibEx.RateHelperVector_begin(self)

    def end(self):
        return _QuantLibEx.RateHelperVector_end(self)

    def rbegin(self):
        return _QuantLibEx.RateHelperVector_rbegin(self)

    def rend(self):
        return _QuantLibEx.RateHelperVector_rend(self)

    def clear(self):
        return _QuantLibEx.RateHelperVector_clear(self)

    def get_allocator(self):
        return _QuantLibEx.RateHelperVector_get_allocator(self)

    def pop_back(self):
        return _QuantLibEx.RateHelperVector_pop_back(self)

    def erase(self, *args):
        return _QuantLibEx.RateHelperVector_erase(self, *args)

    def __init__(self, *args):
        this = _QuantLibEx.new_RateHelperVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _QuantLibEx.RateHelperVector_push_back(self, x)

    def front(self):
        return _QuantLibEx.RateHelperVector_front(self)

    def back(self):
        return _QuantLibEx.RateHelperVector_back(self)

    def assign(self, n, x):
        return _QuantLibEx.RateHelperVector_assign(self, n, x)

    def resize(self, *args):
        return _QuantLibEx.RateHelperVector_resize(self, *args)

    def insert(self, *args):
        return _QuantLibEx.RateHelperVector_insert(self, *args)

    def reserve(self, n):
        return _QuantLibEx.RateHelperVector_reserve(self, n)

    def capacity(self):
        return _QuantLibEx.RateHelperVector_capacity(self)
    __swig_destroy__ = _QuantLibEx.delete_RateHelperVector
    __del__ = lambda self: None
RateHelperVector_swigregister = _QuantLibEx.RateHelperVector_swigregister
RateHelperVector_swigregister(RateHelperVector)

class BondHelperVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BondHelperVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BondHelperVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _QuantLibEx.BondHelperVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _QuantLibEx.BondHelperVector___nonzero__(self)

    def __bool__(self):
        return _QuantLibEx.BondHelperVector___bool__(self)

    def __len__(self):
        return _QuantLibEx.BondHelperVector___len__(self)

    def __getslice__(self, i, j):
        return _QuantLibEx.BondHelperVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _QuantLibEx.BondHelperVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _QuantLibEx.BondHelperVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _QuantLibEx.BondHelperVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _QuantLibEx.BondHelperVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _QuantLibEx.BondHelperVector___setitem__(self, *args)

    def pop(self):
        return _QuantLibEx.BondHelperVector_pop(self)

    def append(self, x):
        return _QuantLibEx.BondHelperVector_append(self, x)

    def empty(self):
        return _QuantLibEx.BondHelperVector_empty(self)

    def size(self):
        return _QuantLibEx.BondHelperVector_size(self)

    def swap(self, v):
        return _QuantLibEx.BondHelperVector_swap(self, v)

    def begin(self):
        return _QuantLibEx.BondHelperVector_begin(self)

    def end(self):
        return _QuantLibEx.BondHelperVector_end(self)

    def rbegin(self):
        return _QuantLibEx.BondHelperVector_rbegin(self)

    def rend(self):
        return _QuantLibEx.BondHelperVector_rend(self)

    def clear(self):
        return _QuantLibEx.BondHelperVector_clear(self)

    def get_allocator(self):
        return _QuantLibEx.BondHelperVector_get_allocator(self)

    def pop_back(self):
        return _QuantLibEx.BondHelperVector_pop_back(self)

    def erase(self, *args):
        return _QuantLibEx.BondHelperVector_erase(self, *args)

    def __init__(self, *args):
        this = _QuantLibEx.new_BondHelperVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _QuantLibEx.BondHelperVector_push_back(self, x)

    def front(self):
        return _QuantLibEx.BondHelperVector_front(self)

    def back(self):
        return _QuantLibEx.BondHelperVector_back(self)

    def assign(self, n, x):
        return _QuantLibEx.BondHelperVector_assign(self, n, x)

    def resize(self, *args):
        return _QuantLibEx.BondHelperVector_resize(self, *args)

    def insert(self, *args):
        return _QuantLibEx.BondHelperVector_insert(self, *args)

    def reserve(self, n):
        return _QuantLibEx.BondHelperVector_reserve(self, n)

    def capacity(self):
        return _QuantLibEx.BondHelperVector_capacity(self)
    __swig_destroy__ = _QuantLibEx.delete_BondHelperVector
    __del__ = lambda self: None
BondHelperVector_swigregister = _QuantLibEx.BondHelperVector_swigregister
BondHelperVector_swigregister(BondHelperVector)

class FittingMethod(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FittingMethod, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FittingMethod, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _QuantLibEx.delete_FittingMethod
    __del__ = lambda self: None

    def size(self):
        return _QuantLibEx.FittingMethod_size(self)

    def solution(self):
        return _QuantLibEx.FittingMethod_solution(self)

    def numberOfIterations(self):
        return _QuantLibEx.FittingMethod_numberOfIterations(self)

    def minimumCostValue(self):
        return _QuantLibEx.FittingMethod_minimumCostValue(self)

    def constrainAtZero(self):
        return _QuantLibEx.FittingMethod_constrainAtZero(self)

    def weights(self):
        return _QuantLibEx.FittingMethod_weights(self)

    def l2(self):
        return _QuantLibEx.FittingMethod_l2(self)

    def optimizationMethod(self):
        return _QuantLibEx.FittingMethod_optimizationMethod(self)
FittingMethod_swigregister = _QuantLibEx.FittingMethod_swigregister
FittingMethod_swigregister(FittingMethod)

class FittedBondDiscountCurve(YieldTermStructure):
    __swig_setmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FittedBondDiscountCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FittedBondDiscountCurve, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLibEx.new_FittedBondDiscountCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def fitResults(self):
        return _QuantLibEx.FittedBondDiscountCurve_fitResults(self)
    __swig_destroy__ = _QuantLibEx.delete_FittedBondDiscountCurve
    __del__ = lambda self: None
FittedBondDiscountCurve_swigregister = _QuantLibEx.FittedBondDiscountCurve_swigregister
FittedBondDiscountCurve_swigregister(FittedBondDiscountCurve)

class ExponentialSplinesFitting(FittingMethod):
    __swig_setmethods__ = {}
    for _s in [FittingMethod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExponentialSplinesFitting, name, value)
    __swig_getmethods__ = {}
    for _s in [FittingMethod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExponentialSplinesFitting, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLibEx.new_ExponentialSplinesFitting(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_ExponentialSplinesFitting
    __del__ = lambda self: None
ExponentialSplinesFitting_swigregister = _QuantLibEx.ExponentialSplinesFitting_swigregister
ExponentialSplinesFitting_swigregister(ExponentialSplinesFitting)

class NelsonSiegelFitting(FittingMethod):
    __swig_setmethods__ = {}
    for _s in [FittingMethod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NelsonSiegelFitting, name, value)
    __swig_getmethods__ = {}
    for _s in [FittingMethod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NelsonSiegelFitting, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLibEx.new_NelsonSiegelFitting(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_NelsonSiegelFitting
    __del__ = lambda self: None
NelsonSiegelFitting_swigregister = _QuantLibEx.NelsonSiegelFitting_swigregister
NelsonSiegelFitting_swigregister(NelsonSiegelFitting)

class SvenssonFitting(FittingMethod):
    __swig_setmethods__ = {}
    for _s in [FittingMethod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SvenssonFitting, name, value)
    __swig_getmethods__ = {}
    for _s in [FittingMethod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SvenssonFitting, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLibEx.new_SvenssonFitting(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_SvenssonFitting
    __del__ = lambda self: None
SvenssonFitting_swigregister = _QuantLibEx.SvenssonFitting_swigregister
SvenssonFitting_swigregister(SvenssonFitting)

class CubicBSplinesFitting(FittingMethod):
    __swig_setmethods__ = {}
    for _s in [FittingMethod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CubicBSplinesFitting, name, value)
    __swig_getmethods__ = {}
    for _s in [FittingMethod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CubicBSplinesFitting, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLibEx.new_CubicBSplinesFitting(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def basisFunction(self, i, t):
        return _QuantLibEx.CubicBSplinesFitting_basisFunction(self, i, t)
    __swig_destroy__ = _QuantLibEx.delete_CubicBSplinesFitting
    __del__ = lambda self: None
CubicBSplinesFitting_swigregister = _QuantLibEx.CubicBSplinesFitting_swigregister
CubicBSplinesFitting_swigregister(CubicBSplinesFitting)

class SimplePolynomialFitting(FittingMethod):
    __swig_setmethods__ = {}
    for _s in [FittingMethod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimplePolynomialFitting, name, value)
    __swig_getmethods__ = {}
    for _s in [FittingMethod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimplePolynomialFitting, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLibEx.new_SimplePolynomialFitting(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_SimplePolynomialFitting
    __del__ = lambda self: None
SimplePolynomialFitting_swigregister = _QuantLibEx.SimplePolynomialFitting_swigregister
SimplePolynomialFitting_swigregister(SimplePolynomialFitting)

class AdjustedSvenssonFitting(FittingMethod):
    __swig_setmethods__ = {}
    for _s in [FittingMethod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdjustedSvenssonFitting, name, value)
    __swig_getmethods__ = {}
    for _s in [FittingMethod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AdjustedSvenssonFitting, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLibEx.new_AdjustedSvenssonFitting(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_AdjustedSvenssonFitting
    __del__ = lambda self: None
AdjustedSvenssonFitting_swigregister = _QuantLibEx.AdjustedSvenssonFitting_swigregister
AdjustedSvenssonFitting_swigregister(AdjustedSvenssonFitting)

class BjorkChristensenFitting(FittingMethod):
    __swig_setmethods__ = {}
    for _s in [FittingMethod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BjorkChristensenFitting, name, value)
    __swig_getmethods__ = {}
    for _s in [FittingMethod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BjorkChristensenFitting, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLibEx.new_BjorkChristensenFitting(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_BjorkChristensenFitting
    __del__ = lambda self: None
BjorkChristensenFitting_swigregister = _QuantLibEx.BjorkChristensenFitting_swigregister
BjorkChristensenFitting_swigregister(BjorkChristensenFitting)

class BlissFitting(FittingMethod):
    __swig_setmethods__ = {}
    for _s in [FittingMethod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlissFitting, name, value)
    __swig_getmethods__ = {}
    for _s in [FittingMethod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BlissFitting, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLibEx.new_BlissFitting(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_BlissFitting
    __del__ = lambda self: None
BlissFitting_swigregister = _QuantLibEx.BlissFitting_swigregister
BlissFitting_swigregister(BlissFitting)

class DieboldLiFitting(FittingMethod):
    __swig_setmethods__ = {}
    for _s in [FittingMethod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DieboldLiFitting, name, value)
    __swig_getmethods__ = {}
    for _s in [FittingMethod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DieboldLiFitting, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLibEx.new_DieboldLiFitting(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLibEx.delete_DieboldLiFitting
    __del__ = lambda self: None
DieboldLiFitting_swigregister = _QuantLibEx.DieboldLiFitting_swigregister
DieboldLiFitting_swigregister(DieboldLiFitting)

class Settings(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Settings, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Settings, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        instance = staticmethod(_QuantLibEx.Settings_instance)
    else:
        instance = _QuantLibEx.Settings_instance

    def getEvaluationDate(self):
        return _QuantLibEx.Settings_getEvaluationDate(self)

    def setEvaluationDate(self, d):
        return _QuantLibEx.Settings_setEvaluationDate(self, d)

    def includeReferenceDateEvents(self, b):
        return _QuantLibEx.Settings_includeReferenceDateEvents(self, b)

    def includeTodaysCashFlows(self, b):
        return _QuantLibEx.Settings_includeTodaysCashFlows(self, b)

    evaluationDate = property(getEvaluationDate,setEvaluationDate,None)
    includeReferenceDateCashFlows = property(None,includeReferenceDateEvents,None)
    includeReferenceDateEvents = property(None,includeReferenceDateEvents,None)
    includeTodaysCashFlows = property(None,includeTodaysCashFlows,None)

    __swig_destroy__ = _QuantLibEx.delete_Settings
    __del__ = lambda self: None
Settings_swigregister = _QuantLibEx.Settings_swigregister
Settings_swigregister(Settings)

def Settings_instance():
    return _QuantLibEx.Settings_instance()
Settings_instance = _QuantLibEx.Settings_instance

# This file is compatible with both classic and new-style classes.


